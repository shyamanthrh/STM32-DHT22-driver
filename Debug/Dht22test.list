
Dht22test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002598  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002658  08002658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026b4  080026b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026bc  080026bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026bc  080026bc  000126bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026c0  080026c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  080026d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080026d0  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e05  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000178c  00000000  00000000  00027e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  000295c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  00029df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013922  00000000  00000000  0002a550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009996  00000000  00000000  0003de72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079ca1  00000000  00000000  00047808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c14a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce4  00000000  00000000  000c14fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002640 	.word	0x08002640

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002640 	.word	0x08002640

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 fc78 	bl	8000bc4 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 fc73 	bl	8000bc4 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_ddiv>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	4657      	mov	r7, sl
 800044c:	464e      	mov	r6, r9
 800044e:	4645      	mov	r5, r8
 8000450:	46de      	mov	lr, fp
 8000452:	b5e0      	push	{r5, r6, r7, lr}
 8000454:	4681      	mov	r9, r0
 8000456:	0005      	movs	r5, r0
 8000458:	030c      	lsls	r4, r1, #12
 800045a:	0048      	lsls	r0, r1, #1
 800045c:	4692      	mov	sl, r2
 800045e:	001f      	movs	r7, r3
 8000460:	b085      	sub	sp, #20
 8000462:	0b24      	lsrs	r4, r4, #12
 8000464:	0d40      	lsrs	r0, r0, #21
 8000466:	0fce      	lsrs	r6, r1, #31
 8000468:	2800      	cmp	r0, #0
 800046a:	d059      	beq.n	8000520 <__aeabi_ddiv+0xd8>
 800046c:	4b87      	ldr	r3, [pc, #540]	; (800068c <__aeabi_ddiv+0x244>)
 800046e:	4298      	cmp	r0, r3
 8000470:	d100      	bne.n	8000474 <__aeabi_ddiv+0x2c>
 8000472:	e098      	b.n	80005a6 <__aeabi_ddiv+0x15e>
 8000474:	0f6b      	lsrs	r3, r5, #29
 8000476:	00e4      	lsls	r4, r4, #3
 8000478:	431c      	orrs	r4, r3
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	041b      	lsls	r3, r3, #16
 800047e:	4323      	orrs	r3, r4
 8000480:	4698      	mov	r8, r3
 8000482:	4b83      	ldr	r3, [pc, #524]	; (8000690 <__aeabi_ddiv+0x248>)
 8000484:	00ed      	lsls	r5, r5, #3
 8000486:	469b      	mov	fp, r3
 8000488:	2300      	movs	r3, #0
 800048a:	4699      	mov	r9, r3
 800048c:	4483      	add	fp, r0
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	033c      	lsls	r4, r7, #12
 8000492:	007b      	lsls	r3, r7, #1
 8000494:	4650      	mov	r0, sl
 8000496:	0b24      	lsrs	r4, r4, #12
 8000498:	0d5b      	lsrs	r3, r3, #21
 800049a:	0fff      	lsrs	r7, r7, #31
 800049c:	2b00      	cmp	r3, #0
 800049e:	d067      	beq.n	8000570 <__aeabi_ddiv+0x128>
 80004a0:	4a7a      	ldr	r2, [pc, #488]	; (800068c <__aeabi_ddiv+0x244>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d018      	beq.n	80004d8 <__aeabi_ddiv+0x90>
 80004a6:	497a      	ldr	r1, [pc, #488]	; (8000690 <__aeabi_ddiv+0x248>)
 80004a8:	0f42      	lsrs	r2, r0, #29
 80004aa:	468c      	mov	ip, r1
 80004ac:	00e4      	lsls	r4, r4, #3
 80004ae:	4659      	mov	r1, fp
 80004b0:	4314      	orrs	r4, r2
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	4463      	add	r3, ip
 80004b6:	0412      	lsls	r2, r2, #16
 80004b8:	1acb      	subs	r3, r1, r3
 80004ba:	4314      	orrs	r4, r2
 80004bc:	469b      	mov	fp, r3
 80004be:	00c2      	lsls	r2, r0, #3
 80004c0:	2000      	movs	r0, #0
 80004c2:	0033      	movs	r3, r6
 80004c4:	407b      	eors	r3, r7
 80004c6:	469a      	mov	sl, r3
 80004c8:	464b      	mov	r3, r9
 80004ca:	2b0f      	cmp	r3, #15
 80004cc:	d900      	bls.n	80004d0 <__aeabi_ddiv+0x88>
 80004ce:	e0ef      	b.n	80006b0 <__aeabi_ddiv+0x268>
 80004d0:	4970      	ldr	r1, [pc, #448]	; (8000694 <__aeabi_ddiv+0x24c>)
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	58cb      	ldr	r3, [r1, r3]
 80004d6:	469f      	mov	pc, r3
 80004d8:	4b6f      	ldr	r3, [pc, #444]	; (8000698 <__aeabi_ddiv+0x250>)
 80004da:	4652      	mov	r2, sl
 80004dc:	469c      	mov	ip, r3
 80004de:	4322      	orrs	r2, r4
 80004e0:	44e3      	add	fp, ip
 80004e2:	2a00      	cmp	r2, #0
 80004e4:	d000      	beq.n	80004e8 <__aeabi_ddiv+0xa0>
 80004e6:	e095      	b.n	8000614 <__aeabi_ddiv+0x1cc>
 80004e8:	4649      	mov	r1, r9
 80004ea:	2302      	movs	r3, #2
 80004ec:	4319      	orrs	r1, r3
 80004ee:	4689      	mov	r9, r1
 80004f0:	2400      	movs	r4, #0
 80004f2:	2002      	movs	r0, #2
 80004f4:	e7e5      	b.n	80004c2 <__aeabi_ddiv+0x7a>
 80004f6:	2300      	movs	r3, #0
 80004f8:	2400      	movs	r4, #0
 80004fa:	2500      	movs	r5, #0
 80004fc:	4652      	mov	r2, sl
 80004fe:	051b      	lsls	r3, r3, #20
 8000500:	4323      	orrs	r3, r4
 8000502:	07d2      	lsls	r2, r2, #31
 8000504:	4313      	orrs	r3, r2
 8000506:	0028      	movs	r0, r5
 8000508:	0019      	movs	r1, r3
 800050a:	b005      	add	sp, #20
 800050c:	bcf0      	pop	{r4, r5, r6, r7}
 800050e:	46bb      	mov	fp, r7
 8000510:	46b2      	mov	sl, r6
 8000512:	46a9      	mov	r9, r5
 8000514:	46a0      	mov	r8, r4
 8000516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000518:	2400      	movs	r4, #0
 800051a:	2500      	movs	r5, #0
 800051c:	4b5b      	ldr	r3, [pc, #364]	; (800068c <__aeabi_ddiv+0x244>)
 800051e:	e7ed      	b.n	80004fc <__aeabi_ddiv+0xb4>
 8000520:	464b      	mov	r3, r9
 8000522:	4323      	orrs	r3, r4
 8000524:	4698      	mov	r8, r3
 8000526:	d100      	bne.n	800052a <__aeabi_ddiv+0xe2>
 8000528:	e089      	b.n	800063e <__aeabi_ddiv+0x1f6>
 800052a:	2c00      	cmp	r4, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_ddiv+0xe8>
 800052e:	e1e0      	b.n	80008f2 <__aeabi_ddiv+0x4aa>
 8000530:	0020      	movs	r0, r4
 8000532:	f000 fb29 	bl	8000b88 <__clzsi2>
 8000536:	0001      	movs	r1, r0
 8000538:	0002      	movs	r2, r0
 800053a:	390b      	subs	r1, #11
 800053c:	231d      	movs	r3, #29
 800053e:	1a5b      	subs	r3, r3, r1
 8000540:	4649      	mov	r1, r9
 8000542:	0010      	movs	r0, r2
 8000544:	40d9      	lsrs	r1, r3
 8000546:	3808      	subs	r0, #8
 8000548:	4084      	lsls	r4, r0
 800054a:	000b      	movs	r3, r1
 800054c:	464d      	mov	r5, r9
 800054e:	4323      	orrs	r3, r4
 8000550:	4698      	mov	r8, r3
 8000552:	4085      	lsls	r5, r0
 8000554:	4851      	ldr	r0, [pc, #324]	; (800069c <__aeabi_ddiv+0x254>)
 8000556:	033c      	lsls	r4, r7, #12
 8000558:	1a83      	subs	r3, r0, r2
 800055a:	469b      	mov	fp, r3
 800055c:	2300      	movs	r3, #0
 800055e:	4699      	mov	r9, r3
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	007b      	lsls	r3, r7, #1
 8000564:	4650      	mov	r0, sl
 8000566:	0b24      	lsrs	r4, r4, #12
 8000568:	0d5b      	lsrs	r3, r3, #21
 800056a:	0fff      	lsrs	r7, r7, #31
 800056c:	2b00      	cmp	r3, #0
 800056e:	d197      	bne.n	80004a0 <__aeabi_ddiv+0x58>
 8000570:	4652      	mov	r2, sl
 8000572:	4322      	orrs	r2, r4
 8000574:	d055      	beq.n	8000622 <__aeabi_ddiv+0x1da>
 8000576:	2c00      	cmp	r4, #0
 8000578:	d100      	bne.n	800057c <__aeabi_ddiv+0x134>
 800057a:	e1ca      	b.n	8000912 <__aeabi_ddiv+0x4ca>
 800057c:	0020      	movs	r0, r4
 800057e:	f000 fb03 	bl	8000b88 <__clzsi2>
 8000582:	0002      	movs	r2, r0
 8000584:	3a0b      	subs	r2, #11
 8000586:	231d      	movs	r3, #29
 8000588:	0001      	movs	r1, r0
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	3908      	subs	r1, #8
 8000590:	40da      	lsrs	r2, r3
 8000592:	408c      	lsls	r4, r1
 8000594:	4314      	orrs	r4, r2
 8000596:	4652      	mov	r2, sl
 8000598:	408a      	lsls	r2, r1
 800059a:	4b41      	ldr	r3, [pc, #260]	; (80006a0 <__aeabi_ddiv+0x258>)
 800059c:	4458      	add	r0, fp
 800059e:	469b      	mov	fp, r3
 80005a0:	4483      	add	fp, r0
 80005a2:	2000      	movs	r0, #0
 80005a4:	e78d      	b.n	80004c2 <__aeabi_ddiv+0x7a>
 80005a6:	464b      	mov	r3, r9
 80005a8:	4323      	orrs	r3, r4
 80005aa:	4698      	mov	r8, r3
 80005ac:	d140      	bne.n	8000630 <__aeabi_ddiv+0x1e8>
 80005ae:	2308      	movs	r3, #8
 80005b0:	4699      	mov	r9, r3
 80005b2:	3b06      	subs	r3, #6
 80005b4:	2500      	movs	r5, #0
 80005b6:	4683      	mov	fp, r0
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e769      	b.n	8000490 <__aeabi_ddiv+0x48>
 80005bc:	46b2      	mov	sl, r6
 80005be:	9b00      	ldr	r3, [sp, #0]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d0a9      	beq.n	8000518 <__aeabi_ddiv+0xd0>
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	d100      	bne.n	80005ca <__aeabi_ddiv+0x182>
 80005c8:	e211      	b.n	80009ee <__aeabi_ddiv+0x5a6>
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d093      	beq.n	80004f6 <__aeabi_ddiv+0xae>
 80005ce:	4a35      	ldr	r2, [pc, #212]	; (80006a4 <__aeabi_ddiv+0x25c>)
 80005d0:	445a      	add	r2, fp
 80005d2:	2a00      	cmp	r2, #0
 80005d4:	dc00      	bgt.n	80005d8 <__aeabi_ddiv+0x190>
 80005d6:	e13c      	b.n	8000852 <__aeabi_ddiv+0x40a>
 80005d8:	076b      	lsls	r3, r5, #29
 80005da:	d000      	beq.n	80005de <__aeabi_ddiv+0x196>
 80005dc:	e1a7      	b.n	800092e <__aeabi_ddiv+0x4e6>
 80005de:	08ed      	lsrs	r5, r5, #3
 80005e0:	4643      	mov	r3, r8
 80005e2:	01db      	lsls	r3, r3, #7
 80005e4:	d506      	bpl.n	80005f4 <__aeabi_ddiv+0x1ac>
 80005e6:	4642      	mov	r2, r8
 80005e8:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <__aeabi_ddiv+0x260>)
 80005ea:	401a      	ands	r2, r3
 80005ec:	4690      	mov	r8, r2
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	00d2      	lsls	r2, r2, #3
 80005f2:	445a      	add	r2, fp
 80005f4:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <__aeabi_ddiv+0x264>)
 80005f6:	429a      	cmp	r2, r3
 80005f8:	dc8e      	bgt.n	8000518 <__aeabi_ddiv+0xd0>
 80005fa:	4643      	mov	r3, r8
 80005fc:	0552      	lsls	r2, r2, #21
 80005fe:	0758      	lsls	r0, r3, #29
 8000600:	025c      	lsls	r4, r3, #9
 8000602:	4305      	orrs	r5, r0
 8000604:	0b24      	lsrs	r4, r4, #12
 8000606:	0d53      	lsrs	r3, r2, #21
 8000608:	e778      	b.n	80004fc <__aeabi_ddiv+0xb4>
 800060a:	46ba      	mov	sl, r7
 800060c:	46a0      	mov	r8, r4
 800060e:	0015      	movs	r5, r2
 8000610:	9000      	str	r0, [sp, #0]
 8000612:	e7d4      	b.n	80005be <__aeabi_ddiv+0x176>
 8000614:	464a      	mov	r2, r9
 8000616:	2303      	movs	r3, #3
 8000618:	431a      	orrs	r2, r3
 800061a:	4691      	mov	r9, r2
 800061c:	2003      	movs	r0, #3
 800061e:	4652      	mov	r2, sl
 8000620:	e74f      	b.n	80004c2 <__aeabi_ddiv+0x7a>
 8000622:	4649      	mov	r1, r9
 8000624:	2301      	movs	r3, #1
 8000626:	4319      	orrs	r1, r3
 8000628:	4689      	mov	r9, r1
 800062a:	2400      	movs	r4, #0
 800062c:	2001      	movs	r0, #1
 800062e:	e748      	b.n	80004c2 <__aeabi_ddiv+0x7a>
 8000630:	230c      	movs	r3, #12
 8000632:	4699      	mov	r9, r3
 8000634:	3b09      	subs	r3, #9
 8000636:	46a0      	mov	r8, r4
 8000638:	4683      	mov	fp, r0
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	e728      	b.n	8000490 <__aeabi_ddiv+0x48>
 800063e:	2304      	movs	r3, #4
 8000640:	4699      	mov	r9, r3
 8000642:	2300      	movs	r3, #0
 8000644:	469b      	mov	fp, r3
 8000646:	3301      	adds	r3, #1
 8000648:	2500      	movs	r5, #0
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	e720      	b.n	8000490 <__aeabi_ddiv+0x48>
 800064e:	2300      	movs	r3, #0
 8000650:	2480      	movs	r4, #128	; 0x80
 8000652:	469a      	mov	sl, r3
 8000654:	2500      	movs	r5, #0
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <__aeabi_ddiv+0x244>)
 8000658:	0324      	lsls	r4, r4, #12
 800065a:	e74f      	b.n	80004fc <__aeabi_ddiv+0xb4>
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	4641      	mov	r1, r8
 8000660:	031b      	lsls	r3, r3, #12
 8000662:	4219      	tst	r1, r3
 8000664:	d008      	beq.n	8000678 <__aeabi_ddiv+0x230>
 8000666:	421c      	tst	r4, r3
 8000668:	d106      	bne.n	8000678 <__aeabi_ddiv+0x230>
 800066a:	431c      	orrs	r4, r3
 800066c:	0324      	lsls	r4, r4, #12
 800066e:	46ba      	mov	sl, r7
 8000670:	0015      	movs	r5, r2
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <__aeabi_ddiv+0x244>)
 8000674:	0b24      	lsrs	r4, r4, #12
 8000676:	e741      	b.n	80004fc <__aeabi_ddiv+0xb4>
 8000678:	2480      	movs	r4, #128	; 0x80
 800067a:	4643      	mov	r3, r8
 800067c:	0324      	lsls	r4, r4, #12
 800067e:	431c      	orrs	r4, r3
 8000680:	0324      	lsls	r4, r4, #12
 8000682:	46b2      	mov	sl, r6
 8000684:	4b01      	ldr	r3, [pc, #4]	; (800068c <__aeabi_ddiv+0x244>)
 8000686:	0b24      	lsrs	r4, r4, #12
 8000688:	e738      	b.n	80004fc <__aeabi_ddiv+0xb4>
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	000007ff 	.word	0x000007ff
 8000690:	fffffc01 	.word	0xfffffc01
 8000694:	08002658 	.word	0x08002658
 8000698:	fffff801 	.word	0xfffff801
 800069c:	fffffc0d 	.word	0xfffffc0d
 80006a0:	000003f3 	.word	0x000003f3
 80006a4:	000003ff 	.word	0x000003ff
 80006a8:	feffffff 	.word	0xfeffffff
 80006ac:	000007fe 	.word	0x000007fe
 80006b0:	4544      	cmp	r4, r8
 80006b2:	d200      	bcs.n	80006b6 <__aeabi_ddiv+0x26e>
 80006b4:	e116      	b.n	80008e4 <__aeabi_ddiv+0x49c>
 80006b6:	d100      	bne.n	80006ba <__aeabi_ddiv+0x272>
 80006b8:	e111      	b.n	80008de <__aeabi_ddiv+0x496>
 80006ba:	2301      	movs	r3, #1
 80006bc:	425b      	negs	r3, r3
 80006be:	469c      	mov	ip, r3
 80006c0:	002e      	movs	r6, r5
 80006c2:	4640      	mov	r0, r8
 80006c4:	2500      	movs	r5, #0
 80006c6:	44e3      	add	fp, ip
 80006c8:	0223      	lsls	r3, r4, #8
 80006ca:	0e14      	lsrs	r4, r2, #24
 80006cc:	431c      	orrs	r4, r3
 80006ce:	0c1b      	lsrs	r3, r3, #16
 80006d0:	4699      	mov	r9, r3
 80006d2:	0423      	lsls	r3, r4, #16
 80006d4:	0c1f      	lsrs	r7, r3, #16
 80006d6:	0212      	lsls	r2, r2, #8
 80006d8:	4649      	mov	r1, r9
 80006da:	9200      	str	r2, [sp, #0]
 80006dc:	9701      	str	r7, [sp, #4]
 80006de:	f7ff fd99 	bl	8000214 <__aeabi_uidivmod>
 80006e2:	0002      	movs	r2, r0
 80006e4:	437a      	muls	r2, r7
 80006e6:	040b      	lsls	r3, r1, #16
 80006e8:	0c31      	lsrs	r1, r6, #16
 80006ea:	4680      	mov	r8, r0
 80006ec:	4319      	orrs	r1, r3
 80006ee:	428a      	cmp	r2, r1
 80006f0:	d90b      	bls.n	800070a <__aeabi_ddiv+0x2c2>
 80006f2:	2301      	movs	r3, #1
 80006f4:	425b      	negs	r3, r3
 80006f6:	469c      	mov	ip, r3
 80006f8:	1909      	adds	r1, r1, r4
 80006fa:	44e0      	add	r8, ip
 80006fc:	428c      	cmp	r4, r1
 80006fe:	d804      	bhi.n	800070a <__aeabi_ddiv+0x2c2>
 8000700:	428a      	cmp	r2, r1
 8000702:	d902      	bls.n	800070a <__aeabi_ddiv+0x2c2>
 8000704:	1e83      	subs	r3, r0, #2
 8000706:	4698      	mov	r8, r3
 8000708:	1909      	adds	r1, r1, r4
 800070a:	1a88      	subs	r0, r1, r2
 800070c:	4649      	mov	r1, r9
 800070e:	f7ff fd81 	bl	8000214 <__aeabi_uidivmod>
 8000712:	0409      	lsls	r1, r1, #16
 8000714:	468c      	mov	ip, r1
 8000716:	0431      	lsls	r1, r6, #16
 8000718:	4666      	mov	r6, ip
 800071a:	9a01      	ldr	r2, [sp, #4]
 800071c:	0c09      	lsrs	r1, r1, #16
 800071e:	4342      	muls	r2, r0
 8000720:	0003      	movs	r3, r0
 8000722:	4331      	orrs	r1, r6
 8000724:	428a      	cmp	r2, r1
 8000726:	d904      	bls.n	8000732 <__aeabi_ddiv+0x2ea>
 8000728:	1909      	adds	r1, r1, r4
 800072a:	3b01      	subs	r3, #1
 800072c:	428c      	cmp	r4, r1
 800072e:	d800      	bhi.n	8000732 <__aeabi_ddiv+0x2ea>
 8000730:	e111      	b.n	8000956 <__aeabi_ddiv+0x50e>
 8000732:	1a89      	subs	r1, r1, r2
 8000734:	4642      	mov	r2, r8
 8000736:	9e00      	ldr	r6, [sp, #0]
 8000738:	0412      	lsls	r2, r2, #16
 800073a:	431a      	orrs	r2, r3
 800073c:	0c33      	lsrs	r3, r6, #16
 800073e:	001f      	movs	r7, r3
 8000740:	0c10      	lsrs	r0, r2, #16
 8000742:	4690      	mov	r8, r2
 8000744:	9302      	str	r3, [sp, #8]
 8000746:	0413      	lsls	r3, r2, #16
 8000748:	0432      	lsls	r2, r6, #16
 800074a:	0c16      	lsrs	r6, r2, #16
 800074c:	0032      	movs	r2, r6
 800074e:	0c1b      	lsrs	r3, r3, #16
 8000750:	435a      	muls	r2, r3
 8000752:	9603      	str	r6, [sp, #12]
 8000754:	437b      	muls	r3, r7
 8000756:	4346      	muls	r6, r0
 8000758:	4378      	muls	r0, r7
 800075a:	0c17      	lsrs	r7, r2, #16
 800075c:	46bc      	mov	ip, r7
 800075e:	199b      	adds	r3, r3, r6
 8000760:	4463      	add	r3, ip
 8000762:	429e      	cmp	r6, r3
 8000764:	d903      	bls.n	800076e <__aeabi_ddiv+0x326>
 8000766:	2680      	movs	r6, #128	; 0x80
 8000768:	0276      	lsls	r6, r6, #9
 800076a:	46b4      	mov	ip, r6
 800076c:	4460      	add	r0, ip
 800076e:	0c1e      	lsrs	r6, r3, #16
 8000770:	1830      	adds	r0, r6, r0
 8000772:	0416      	lsls	r6, r2, #16
 8000774:	041b      	lsls	r3, r3, #16
 8000776:	0c36      	lsrs	r6, r6, #16
 8000778:	199e      	adds	r6, r3, r6
 800077a:	4281      	cmp	r1, r0
 800077c:	d200      	bcs.n	8000780 <__aeabi_ddiv+0x338>
 800077e:	e09c      	b.n	80008ba <__aeabi_ddiv+0x472>
 8000780:	d100      	bne.n	8000784 <__aeabi_ddiv+0x33c>
 8000782:	e097      	b.n	80008b4 <__aeabi_ddiv+0x46c>
 8000784:	1bae      	subs	r6, r5, r6
 8000786:	1a09      	subs	r1, r1, r0
 8000788:	42b5      	cmp	r5, r6
 800078a:	4180      	sbcs	r0, r0
 800078c:	4240      	negs	r0, r0
 800078e:	1a08      	subs	r0, r1, r0
 8000790:	4284      	cmp	r4, r0
 8000792:	d100      	bne.n	8000796 <__aeabi_ddiv+0x34e>
 8000794:	e111      	b.n	80009ba <__aeabi_ddiv+0x572>
 8000796:	4649      	mov	r1, r9
 8000798:	f7ff fd3c 	bl	8000214 <__aeabi_uidivmod>
 800079c:	9a01      	ldr	r2, [sp, #4]
 800079e:	040b      	lsls	r3, r1, #16
 80007a0:	4342      	muls	r2, r0
 80007a2:	0c31      	lsrs	r1, r6, #16
 80007a4:	0005      	movs	r5, r0
 80007a6:	4319      	orrs	r1, r3
 80007a8:	428a      	cmp	r2, r1
 80007aa:	d907      	bls.n	80007bc <__aeabi_ddiv+0x374>
 80007ac:	1909      	adds	r1, r1, r4
 80007ae:	3d01      	subs	r5, #1
 80007b0:	428c      	cmp	r4, r1
 80007b2:	d803      	bhi.n	80007bc <__aeabi_ddiv+0x374>
 80007b4:	428a      	cmp	r2, r1
 80007b6:	d901      	bls.n	80007bc <__aeabi_ddiv+0x374>
 80007b8:	1e85      	subs	r5, r0, #2
 80007ba:	1909      	adds	r1, r1, r4
 80007bc:	1a88      	subs	r0, r1, r2
 80007be:	4649      	mov	r1, r9
 80007c0:	f7ff fd28 	bl	8000214 <__aeabi_uidivmod>
 80007c4:	0409      	lsls	r1, r1, #16
 80007c6:	468c      	mov	ip, r1
 80007c8:	0431      	lsls	r1, r6, #16
 80007ca:	4666      	mov	r6, ip
 80007cc:	9a01      	ldr	r2, [sp, #4]
 80007ce:	0c09      	lsrs	r1, r1, #16
 80007d0:	4342      	muls	r2, r0
 80007d2:	0003      	movs	r3, r0
 80007d4:	4331      	orrs	r1, r6
 80007d6:	428a      	cmp	r2, r1
 80007d8:	d907      	bls.n	80007ea <__aeabi_ddiv+0x3a2>
 80007da:	1909      	adds	r1, r1, r4
 80007dc:	3b01      	subs	r3, #1
 80007de:	428c      	cmp	r4, r1
 80007e0:	d803      	bhi.n	80007ea <__aeabi_ddiv+0x3a2>
 80007e2:	428a      	cmp	r2, r1
 80007e4:	d901      	bls.n	80007ea <__aeabi_ddiv+0x3a2>
 80007e6:	1e83      	subs	r3, r0, #2
 80007e8:	1909      	adds	r1, r1, r4
 80007ea:	9e03      	ldr	r6, [sp, #12]
 80007ec:	1a89      	subs	r1, r1, r2
 80007ee:	0032      	movs	r2, r6
 80007f0:	042d      	lsls	r5, r5, #16
 80007f2:	431d      	orrs	r5, r3
 80007f4:	9f02      	ldr	r7, [sp, #8]
 80007f6:	042b      	lsls	r3, r5, #16
 80007f8:	0c1b      	lsrs	r3, r3, #16
 80007fa:	435a      	muls	r2, r3
 80007fc:	437b      	muls	r3, r7
 80007fe:	469c      	mov	ip, r3
 8000800:	0c28      	lsrs	r0, r5, #16
 8000802:	4346      	muls	r6, r0
 8000804:	0c13      	lsrs	r3, r2, #16
 8000806:	44b4      	add	ip, r6
 8000808:	4463      	add	r3, ip
 800080a:	4378      	muls	r0, r7
 800080c:	429e      	cmp	r6, r3
 800080e:	d903      	bls.n	8000818 <__aeabi_ddiv+0x3d0>
 8000810:	2680      	movs	r6, #128	; 0x80
 8000812:	0276      	lsls	r6, r6, #9
 8000814:	46b4      	mov	ip, r6
 8000816:	4460      	add	r0, ip
 8000818:	0c1e      	lsrs	r6, r3, #16
 800081a:	0412      	lsls	r2, r2, #16
 800081c:	041b      	lsls	r3, r3, #16
 800081e:	0c12      	lsrs	r2, r2, #16
 8000820:	1830      	adds	r0, r6, r0
 8000822:	189b      	adds	r3, r3, r2
 8000824:	4281      	cmp	r1, r0
 8000826:	d306      	bcc.n	8000836 <__aeabi_ddiv+0x3ee>
 8000828:	d002      	beq.n	8000830 <__aeabi_ddiv+0x3e8>
 800082a:	2301      	movs	r3, #1
 800082c:	431d      	orrs	r5, r3
 800082e:	e6ce      	b.n	80005ce <__aeabi_ddiv+0x186>
 8000830:	2b00      	cmp	r3, #0
 8000832:	d100      	bne.n	8000836 <__aeabi_ddiv+0x3ee>
 8000834:	e6cb      	b.n	80005ce <__aeabi_ddiv+0x186>
 8000836:	1861      	adds	r1, r4, r1
 8000838:	1e6e      	subs	r6, r5, #1
 800083a:	42a1      	cmp	r1, r4
 800083c:	d200      	bcs.n	8000840 <__aeabi_ddiv+0x3f8>
 800083e:	e0a4      	b.n	800098a <__aeabi_ddiv+0x542>
 8000840:	4281      	cmp	r1, r0
 8000842:	d200      	bcs.n	8000846 <__aeabi_ddiv+0x3fe>
 8000844:	e0c9      	b.n	80009da <__aeabi_ddiv+0x592>
 8000846:	d100      	bne.n	800084a <__aeabi_ddiv+0x402>
 8000848:	e0d9      	b.n	80009fe <__aeabi_ddiv+0x5b6>
 800084a:	0035      	movs	r5, r6
 800084c:	e7ed      	b.n	800082a <__aeabi_ddiv+0x3e2>
 800084e:	2501      	movs	r5, #1
 8000850:	426d      	negs	r5, r5
 8000852:	2101      	movs	r1, #1
 8000854:	1a89      	subs	r1, r1, r2
 8000856:	2938      	cmp	r1, #56	; 0x38
 8000858:	dd00      	ble.n	800085c <__aeabi_ddiv+0x414>
 800085a:	e64c      	b.n	80004f6 <__aeabi_ddiv+0xae>
 800085c:	291f      	cmp	r1, #31
 800085e:	dc00      	bgt.n	8000862 <__aeabi_ddiv+0x41a>
 8000860:	e07f      	b.n	8000962 <__aeabi_ddiv+0x51a>
 8000862:	231f      	movs	r3, #31
 8000864:	425b      	negs	r3, r3
 8000866:	1a9a      	subs	r2, r3, r2
 8000868:	4643      	mov	r3, r8
 800086a:	40d3      	lsrs	r3, r2
 800086c:	2920      	cmp	r1, #32
 800086e:	d004      	beq.n	800087a <__aeabi_ddiv+0x432>
 8000870:	4644      	mov	r4, r8
 8000872:	4a65      	ldr	r2, [pc, #404]	; (8000a08 <__aeabi_ddiv+0x5c0>)
 8000874:	445a      	add	r2, fp
 8000876:	4094      	lsls	r4, r2
 8000878:	4325      	orrs	r5, r4
 800087a:	1e6a      	subs	r2, r5, #1
 800087c:	4195      	sbcs	r5, r2
 800087e:	2207      	movs	r2, #7
 8000880:	432b      	orrs	r3, r5
 8000882:	0015      	movs	r5, r2
 8000884:	2400      	movs	r4, #0
 8000886:	401d      	ands	r5, r3
 8000888:	421a      	tst	r2, r3
 800088a:	d100      	bne.n	800088e <__aeabi_ddiv+0x446>
 800088c:	e0a1      	b.n	80009d2 <__aeabi_ddiv+0x58a>
 800088e:	220f      	movs	r2, #15
 8000890:	2400      	movs	r4, #0
 8000892:	401a      	ands	r2, r3
 8000894:	2a04      	cmp	r2, #4
 8000896:	d100      	bne.n	800089a <__aeabi_ddiv+0x452>
 8000898:	e098      	b.n	80009cc <__aeabi_ddiv+0x584>
 800089a:	1d1a      	adds	r2, r3, #4
 800089c:	429a      	cmp	r2, r3
 800089e:	419b      	sbcs	r3, r3
 80008a0:	425b      	negs	r3, r3
 80008a2:	18e4      	adds	r4, r4, r3
 80008a4:	0013      	movs	r3, r2
 80008a6:	0222      	lsls	r2, r4, #8
 80008a8:	d400      	bmi.n	80008ac <__aeabi_ddiv+0x464>
 80008aa:	e08f      	b.n	80009cc <__aeabi_ddiv+0x584>
 80008ac:	2301      	movs	r3, #1
 80008ae:	2400      	movs	r4, #0
 80008b0:	2500      	movs	r5, #0
 80008b2:	e623      	b.n	80004fc <__aeabi_ddiv+0xb4>
 80008b4:	42b5      	cmp	r5, r6
 80008b6:	d300      	bcc.n	80008ba <__aeabi_ddiv+0x472>
 80008b8:	e764      	b.n	8000784 <__aeabi_ddiv+0x33c>
 80008ba:	4643      	mov	r3, r8
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	9b00      	ldr	r3, [sp, #0]
 80008c0:	469c      	mov	ip, r3
 80008c2:	4465      	add	r5, ip
 80008c4:	001f      	movs	r7, r3
 80008c6:	429d      	cmp	r5, r3
 80008c8:	419b      	sbcs	r3, r3
 80008ca:	425b      	negs	r3, r3
 80008cc:	191b      	adds	r3, r3, r4
 80008ce:	18c9      	adds	r1, r1, r3
 80008d0:	428c      	cmp	r4, r1
 80008d2:	d23a      	bcs.n	800094a <__aeabi_ddiv+0x502>
 80008d4:	4288      	cmp	r0, r1
 80008d6:	d863      	bhi.n	80009a0 <__aeabi_ddiv+0x558>
 80008d8:	d060      	beq.n	800099c <__aeabi_ddiv+0x554>
 80008da:	4690      	mov	r8, r2
 80008dc:	e752      	b.n	8000784 <__aeabi_ddiv+0x33c>
 80008de:	42aa      	cmp	r2, r5
 80008e0:	d900      	bls.n	80008e4 <__aeabi_ddiv+0x49c>
 80008e2:	e6ea      	b.n	80006ba <__aeabi_ddiv+0x272>
 80008e4:	4643      	mov	r3, r8
 80008e6:	07de      	lsls	r6, r3, #31
 80008e8:	0858      	lsrs	r0, r3, #1
 80008ea:	086b      	lsrs	r3, r5, #1
 80008ec:	431e      	orrs	r6, r3
 80008ee:	07ed      	lsls	r5, r5, #31
 80008f0:	e6ea      	b.n	80006c8 <__aeabi_ddiv+0x280>
 80008f2:	4648      	mov	r0, r9
 80008f4:	f000 f948 	bl	8000b88 <__clzsi2>
 80008f8:	0001      	movs	r1, r0
 80008fa:	0002      	movs	r2, r0
 80008fc:	3115      	adds	r1, #21
 80008fe:	3220      	adds	r2, #32
 8000900:	291c      	cmp	r1, #28
 8000902:	dc00      	bgt.n	8000906 <__aeabi_ddiv+0x4be>
 8000904:	e61a      	b.n	800053c <__aeabi_ddiv+0xf4>
 8000906:	464b      	mov	r3, r9
 8000908:	3808      	subs	r0, #8
 800090a:	4083      	lsls	r3, r0
 800090c:	2500      	movs	r5, #0
 800090e:	4698      	mov	r8, r3
 8000910:	e620      	b.n	8000554 <__aeabi_ddiv+0x10c>
 8000912:	f000 f939 	bl	8000b88 <__clzsi2>
 8000916:	0003      	movs	r3, r0
 8000918:	001a      	movs	r2, r3
 800091a:	3215      	adds	r2, #21
 800091c:	3020      	adds	r0, #32
 800091e:	2a1c      	cmp	r2, #28
 8000920:	dc00      	bgt.n	8000924 <__aeabi_ddiv+0x4dc>
 8000922:	e630      	b.n	8000586 <__aeabi_ddiv+0x13e>
 8000924:	4654      	mov	r4, sl
 8000926:	3b08      	subs	r3, #8
 8000928:	2200      	movs	r2, #0
 800092a:	409c      	lsls	r4, r3
 800092c:	e635      	b.n	800059a <__aeabi_ddiv+0x152>
 800092e:	230f      	movs	r3, #15
 8000930:	402b      	ands	r3, r5
 8000932:	2b04      	cmp	r3, #4
 8000934:	d100      	bne.n	8000938 <__aeabi_ddiv+0x4f0>
 8000936:	e652      	b.n	80005de <__aeabi_ddiv+0x196>
 8000938:	2305      	movs	r3, #5
 800093a:	425b      	negs	r3, r3
 800093c:	42ab      	cmp	r3, r5
 800093e:	419b      	sbcs	r3, r3
 8000940:	3504      	adds	r5, #4
 8000942:	425b      	negs	r3, r3
 8000944:	08ed      	lsrs	r5, r5, #3
 8000946:	4498      	add	r8, r3
 8000948:	e64a      	b.n	80005e0 <__aeabi_ddiv+0x198>
 800094a:	428c      	cmp	r4, r1
 800094c:	d1c5      	bne.n	80008da <__aeabi_ddiv+0x492>
 800094e:	42af      	cmp	r7, r5
 8000950:	d9c0      	bls.n	80008d4 <__aeabi_ddiv+0x48c>
 8000952:	4690      	mov	r8, r2
 8000954:	e716      	b.n	8000784 <__aeabi_ddiv+0x33c>
 8000956:	428a      	cmp	r2, r1
 8000958:	d800      	bhi.n	800095c <__aeabi_ddiv+0x514>
 800095a:	e6ea      	b.n	8000732 <__aeabi_ddiv+0x2ea>
 800095c:	1e83      	subs	r3, r0, #2
 800095e:	1909      	adds	r1, r1, r4
 8000960:	e6e7      	b.n	8000732 <__aeabi_ddiv+0x2ea>
 8000962:	4a2a      	ldr	r2, [pc, #168]	; (8000a0c <__aeabi_ddiv+0x5c4>)
 8000964:	0028      	movs	r0, r5
 8000966:	445a      	add	r2, fp
 8000968:	4643      	mov	r3, r8
 800096a:	4095      	lsls	r5, r2
 800096c:	4093      	lsls	r3, r2
 800096e:	40c8      	lsrs	r0, r1
 8000970:	1e6a      	subs	r2, r5, #1
 8000972:	4195      	sbcs	r5, r2
 8000974:	4644      	mov	r4, r8
 8000976:	4303      	orrs	r3, r0
 8000978:	432b      	orrs	r3, r5
 800097a:	40cc      	lsrs	r4, r1
 800097c:	075a      	lsls	r2, r3, #29
 800097e:	d092      	beq.n	80008a6 <__aeabi_ddiv+0x45e>
 8000980:	220f      	movs	r2, #15
 8000982:	401a      	ands	r2, r3
 8000984:	2a04      	cmp	r2, #4
 8000986:	d188      	bne.n	800089a <__aeabi_ddiv+0x452>
 8000988:	e78d      	b.n	80008a6 <__aeabi_ddiv+0x45e>
 800098a:	0035      	movs	r5, r6
 800098c:	4281      	cmp	r1, r0
 800098e:	d000      	beq.n	8000992 <__aeabi_ddiv+0x54a>
 8000990:	e74b      	b.n	800082a <__aeabi_ddiv+0x3e2>
 8000992:	9a00      	ldr	r2, [sp, #0]
 8000994:	4293      	cmp	r3, r2
 8000996:	d000      	beq.n	800099a <__aeabi_ddiv+0x552>
 8000998:	e747      	b.n	800082a <__aeabi_ddiv+0x3e2>
 800099a:	e618      	b.n	80005ce <__aeabi_ddiv+0x186>
 800099c:	42ae      	cmp	r6, r5
 800099e:	d99c      	bls.n	80008da <__aeabi_ddiv+0x492>
 80009a0:	2302      	movs	r3, #2
 80009a2:	425b      	negs	r3, r3
 80009a4:	469c      	mov	ip, r3
 80009a6:	9b00      	ldr	r3, [sp, #0]
 80009a8:	44e0      	add	r8, ip
 80009aa:	469c      	mov	ip, r3
 80009ac:	4465      	add	r5, ip
 80009ae:	429d      	cmp	r5, r3
 80009b0:	419b      	sbcs	r3, r3
 80009b2:	425b      	negs	r3, r3
 80009b4:	191b      	adds	r3, r3, r4
 80009b6:	18c9      	adds	r1, r1, r3
 80009b8:	e6e4      	b.n	8000784 <__aeabi_ddiv+0x33c>
 80009ba:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <__aeabi_ddiv+0x5c8>)
 80009bc:	445a      	add	r2, fp
 80009be:	2a00      	cmp	r2, #0
 80009c0:	dc00      	bgt.n	80009c4 <__aeabi_ddiv+0x57c>
 80009c2:	e744      	b.n	800084e <__aeabi_ddiv+0x406>
 80009c4:	2301      	movs	r3, #1
 80009c6:	2500      	movs	r5, #0
 80009c8:	4498      	add	r8, r3
 80009ca:	e609      	b.n	80005e0 <__aeabi_ddiv+0x198>
 80009cc:	0765      	lsls	r5, r4, #29
 80009ce:	0264      	lsls	r4, r4, #9
 80009d0:	0b24      	lsrs	r4, r4, #12
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	431d      	orrs	r5, r3
 80009d6:	2300      	movs	r3, #0
 80009d8:	e590      	b.n	80004fc <__aeabi_ddiv+0xb4>
 80009da:	9e00      	ldr	r6, [sp, #0]
 80009dc:	3d02      	subs	r5, #2
 80009de:	0072      	lsls	r2, r6, #1
 80009e0:	42b2      	cmp	r2, r6
 80009e2:	41bf      	sbcs	r7, r7
 80009e4:	427f      	negs	r7, r7
 80009e6:	193c      	adds	r4, r7, r4
 80009e8:	1909      	adds	r1, r1, r4
 80009ea:	9200      	str	r2, [sp, #0]
 80009ec:	e7ce      	b.n	800098c <__aeabi_ddiv+0x544>
 80009ee:	2480      	movs	r4, #128	; 0x80
 80009f0:	4643      	mov	r3, r8
 80009f2:	0324      	lsls	r4, r4, #12
 80009f4:	431c      	orrs	r4, r3
 80009f6:	0324      	lsls	r4, r4, #12
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <__aeabi_ddiv+0x5cc>)
 80009fa:	0b24      	lsrs	r4, r4, #12
 80009fc:	e57e      	b.n	80004fc <__aeabi_ddiv+0xb4>
 80009fe:	9a00      	ldr	r2, [sp, #0]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d3ea      	bcc.n	80009da <__aeabi_ddiv+0x592>
 8000a04:	0035      	movs	r5, r6
 8000a06:	e7c4      	b.n	8000992 <__aeabi_ddiv+0x54a>
 8000a08:	0000043e 	.word	0x0000043e
 8000a0c:	0000041e 	.word	0x0000041e
 8000a10:	000003ff 	.word	0x000003ff
 8000a14:	000007ff 	.word	0x000007ff

08000a18 <__aeabi_i2d>:
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	d016      	beq.n	8000a4c <__aeabi_i2d+0x34>
 8000a1e:	17c3      	asrs	r3, r0, #31
 8000a20:	18c5      	adds	r5, r0, r3
 8000a22:	405d      	eors	r5, r3
 8000a24:	0fc4      	lsrs	r4, r0, #31
 8000a26:	0028      	movs	r0, r5
 8000a28:	f000 f8ae 	bl	8000b88 <__clzsi2>
 8000a2c:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <__aeabi_i2d+0x5c>)
 8000a2e:	1a12      	subs	r2, r2, r0
 8000a30:	280a      	cmp	r0, #10
 8000a32:	dc16      	bgt.n	8000a62 <__aeabi_i2d+0x4a>
 8000a34:	0003      	movs	r3, r0
 8000a36:	002e      	movs	r6, r5
 8000a38:	3315      	adds	r3, #21
 8000a3a:	409e      	lsls	r6, r3
 8000a3c:	230b      	movs	r3, #11
 8000a3e:	1a18      	subs	r0, r3, r0
 8000a40:	40c5      	lsrs	r5, r0
 8000a42:	0553      	lsls	r3, r2, #21
 8000a44:	032d      	lsls	r5, r5, #12
 8000a46:	0b2d      	lsrs	r5, r5, #12
 8000a48:	0d5b      	lsrs	r3, r3, #21
 8000a4a:	e003      	b.n	8000a54 <__aeabi_i2d+0x3c>
 8000a4c:	2400      	movs	r4, #0
 8000a4e:	2300      	movs	r3, #0
 8000a50:	2500      	movs	r5, #0
 8000a52:	2600      	movs	r6, #0
 8000a54:	051b      	lsls	r3, r3, #20
 8000a56:	432b      	orrs	r3, r5
 8000a58:	07e4      	lsls	r4, r4, #31
 8000a5a:	4323      	orrs	r3, r4
 8000a5c:	0030      	movs	r0, r6
 8000a5e:	0019      	movs	r1, r3
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	380b      	subs	r0, #11
 8000a64:	4085      	lsls	r5, r0
 8000a66:	0553      	lsls	r3, r2, #21
 8000a68:	032d      	lsls	r5, r5, #12
 8000a6a:	2600      	movs	r6, #0
 8000a6c:	0b2d      	lsrs	r5, r5, #12
 8000a6e:	0d5b      	lsrs	r3, r3, #21
 8000a70:	e7f0      	b.n	8000a54 <__aeabi_i2d+0x3c>
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	0000041e 	.word	0x0000041e

08000a78 <__aeabi_d2f>:
 8000a78:	0002      	movs	r2, r0
 8000a7a:	004b      	lsls	r3, r1, #1
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	0308      	lsls	r0, r1, #12
 8000a80:	0d5b      	lsrs	r3, r3, #21
 8000a82:	4e3d      	ldr	r6, [pc, #244]	; (8000b78 <__aeabi_d2f+0x100>)
 8000a84:	0fcc      	lsrs	r4, r1, #31
 8000a86:	0a40      	lsrs	r0, r0, #9
 8000a88:	0f51      	lsrs	r1, r2, #29
 8000a8a:	1c5f      	adds	r7, r3, #1
 8000a8c:	4308      	orrs	r0, r1
 8000a8e:	00d5      	lsls	r5, r2, #3
 8000a90:	4237      	tst	r7, r6
 8000a92:	d00a      	beq.n	8000aaa <__aeabi_d2f+0x32>
 8000a94:	4939      	ldr	r1, [pc, #228]	; (8000b7c <__aeabi_d2f+0x104>)
 8000a96:	185e      	adds	r6, r3, r1
 8000a98:	2efe      	cmp	r6, #254	; 0xfe
 8000a9a:	dd16      	ble.n	8000aca <__aeabi_d2f+0x52>
 8000a9c:	23ff      	movs	r3, #255	; 0xff
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	07e0      	lsls	r0, r4, #31
 8000aa6:	4318      	orrs	r0, r3
 8000aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d106      	bne.n	8000abc <__aeabi_d2f+0x44>
 8000aae:	4328      	orrs	r0, r5
 8000ab0:	d027      	beq.n	8000b02 <__aeabi_d2f+0x8a>
 8000ab2:	2105      	movs	r1, #5
 8000ab4:	0189      	lsls	r1, r1, #6
 8000ab6:	0a49      	lsrs	r1, r1, #9
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	e7f1      	b.n	8000aa0 <__aeabi_d2f+0x28>
 8000abc:	4305      	orrs	r5, r0
 8000abe:	d0ed      	beq.n	8000a9c <__aeabi_d2f+0x24>
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	03c9      	lsls	r1, r1, #15
 8000ac4:	23ff      	movs	r3, #255	; 0xff
 8000ac6:	4301      	orrs	r1, r0
 8000ac8:	e7ea      	b.n	8000aa0 <__aeabi_d2f+0x28>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	dd1c      	ble.n	8000b08 <__aeabi_d2f+0x90>
 8000ace:	0192      	lsls	r2, r2, #6
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	1e4a      	subs	r2, r1, #1
 8000ad4:	4191      	sbcs	r1, r2
 8000ad6:	00c0      	lsls	r0, r0, #3
 8000ad8:	0f6d      	lsrs	r5, r5, #29
 8000ada:	4301      	orrs	r1, r0
 8000adc:	4329      	orrs	r1, r5
 8000ade:	074b      	lsls	r3, r1, #29
 8000ae0:	d048      	beq.n	8000b74 <__aeabi_d2f+0xfc>
 8000ae2:	230f      	movs	r3, #15
 8000ae4:	400b      	ands	r3, r1
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	d000      	beq.n	8000aec <__aeabi_d2f+0x74>
 8000aea:	3104      	adds	r1, #4
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	04db      	lsls	r3, r3, #19
 8000af0:	400b      	ands	r3, r1
 8000af2:	d03f      	beq.n	8000b74 <__aeabi_d2f+0xfc>
 8000af4:	1c72      	adds	r2, r6, #1
 8000af6:	2efe      	cmp	r6, #254	; 0xfe
 8000af8:	d0d0      	beq.n	8000a9c <__aeabi_d2f+0x24>
 8000afa:	0189      	lsls	r1, r1, #6
 8000afc:	0a49      	lsrs	r1, r1, #9
 8000afe:	b2d3      	uxtb	r3, r2
 8000b00:	e7ce      	b.n	8000aa0 <__aeabi_d2f+0x28>
 8000b02:	2300      	movs	r3, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	e7cb      	b.n	8000aa0 <__aeabi_d2f+0x28>
 8000b08:	0032      	movs	r2, r6
 8000b0a:	3217      	adds	r2, #23
 8000b0c:	db22      	blt.n	8000b54 <__aeabi_d2f+0xdc>
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	221e      	movs	r2, #30
 8000b12:	0409      	lsls	r1, r1, #16
 8000b14:	4308      	orrs	r0, r1
 8000b16:	1b92      	subs	r2, r2, r6
 8000b18:	2a1f      	cmp	r2, #31
 8000b1a:	dd1d      	ble.n	8000b58 <__aeabi_d2f+0xe0>
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4249      	negs	r1, r1
 8000b20:	1b8e      	subs	r6, r1, r6
 8000b22:	0001      	movs	r1, r0
 8000b24:	40f1      	lsrs	r1, r6
 8000b26:	000e      	movs	r6, r1
 8000b28:	2a20      	cmp	r2, #32
 8000b2a:	d004      	beq.n	8000b36 <__aeabi_d2f+0xbe>
 8000b2c:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <__aeabi_d2f+0x108>)
 8000b2e:	4694      	mov	ip, r2
 8000b30:	4463      	add	r3, ip
 8000b32:	4098      	lsls	r0, r3
 8000b34:	4305      	orrs	r5, r0
 8000b36:	0029      	movs	r1, r5
 8000b38:	1e4d      	subs	r5, r1, #1
 8000b3a:	41a9      	sbcs	r1, r5
 8000b3c:	4331      	orrs	r1, r6
 8000b3e:	2600      	movs	r6, #0
 8000b40:	074b      	lsls	r3, r1, #29
 8000b42:	d1ce      	bne.n	8000ae2 <__aeabi_d2f+0x6a>
 8000b44:	2080      	movs	r0, #128	; 0x80
 8000b46:	000b      	movs	r3, r1
 8000b48:	04c0      	lsls	r0, r0, #19
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4003      	ands	r3, r0
 8000b4e:	4201      	tst	r1, r0
 8000b50:	d1d3      	bne.n	8000afa <__aeabi_d2f+0x82>
 8000b52:	e7af      	b.n	8000ab4 <__aeabi_d2f+0x3c>
 8000b54:	2300      	movs	r3, #0
 8000b56:	e7ac      	b.n	8000ab2 <__aeabi_d2f+0x3a>
 8000b58:	490a      	ldr	r1, [pc, #40]	; (8000b84 <__aeabi_d2f+0x10c>)
 8000b5a:	468c      	mov	ip, r1
 8000b5c:	0029      	movs	r1, r5
 8000b5e:	4463      	add	r3, ip
 8000b60:	40d1      	lsrs	r1, r2
 8000b62:	409d      	lsls	r5, r3
 8000b64:	000a      	movs	r2, r1
 8000b66:	0029      	movs	r1, r5
 8000b68:	4098      	lsls	r0, r3
 8000b6a:	1e4d      	subs	r5, r1, #1
 8000b6c:	41a9      	sbcs	r1, r5
 8000b6e:	4301      	orrs	r1, r0
 8000b70:	4311      	orrs	r1, r2
 8000b72:	e7e4      	b.n	8000b3e <__aeabi_d2f+0xc6>
 8000b74:	0033      	movs	r3, r6
 8000b76:	e79d      	b.n	8000ab4 <__aeabi_d2f+0x3c>
 8000b78:	000007fe 	.word	0x000007fe
 8000b7c:	fffffc80 	.word	0xfffffc80
 8000b80:	fffffca2 	.word	0xfffffca2
 8000b84:	fffffc82 	.word	0xfffffc82

08000b88 <__clzsi2>:
 8000b88:	211c      	movs	r1, #28
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	041b      	lsls	r3, r3, #16
 8000b8e:	4298      	cmp	r0, r3
 8000b90:	d301      	bcc.n	8000b96 <__clzsi2+0xe>
 8000b92:	0c00      	lsrs	r0, r0, #16
 8000b94:	3910      	subs	r1, #16
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	d301      	bcc.n	8000ba0 <__clzsi2+0x18>
 8000b9c:	0a00      	lsrs	r0, r0, #8
 8000b9e:	3908      	subs	r1, #8
 8000ba0:	091b      	lsrs	r3, r3, #4
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d301      	bcc.n	8000baa <__clzsi2+0x22>
 8000ba6:	0900      	lsrs	r0, r0, #4
 8000ba8:	3904      	subs	r1, #4
 8000baa:	a202      	add	r2, pc, #8	; (adr r2, 8000bb4 <__clzsi2+0x2c>)
 8000bac:	5c10      	ldrb	r0, [r2, r0]
 8000bae:	1840      	adds	r0, r0, r1
 8000bb0:	4770      	bx	lr
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	02020304 	.word	0x02020304
 8000bb8:	01010101 	.word	0x01010101
	...

08000bc4 <__clzdi2>:
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	d103      	bne.n	8000bd2 <__clzdi2+0xe>
 8000bca:	f7ff ffdd 	bl	8000b88 <__clzsi2>
 8000bce:	3020      	adds	r0, #32
 8000bd0:	e002      	b.n	8000bd8 <__clzdi2+0x14>
 8000bd2:	1c08      	adds	r0, r1, #0
 8000bd4:	f7ff ffd8 	bl	8000b88 <__clzsi2>
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)

08000bdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	0018      	movs	r0, r3
 8000be6:	2314      	movs	r3, #20
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f001 fd20 	bl	8002630 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_GPIO_Init+0x6c>)
 8000bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_GPIO_Init+0x6c>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_GPIO_Init+0x6c>)
 8000bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c00:	2201      	movs	r2, #1
 8000c02:	4013      	ands	r3, r2
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_GPIO_Port, DATA_Pin, GPIO_PIN_RESET);
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	00d9      	lsls	r1, r3, #3
 8000c0c:	23a0      	movs	r3, #160	; 0xa0
 8000c0e:	05db      	lsls	r3, r3, #23
 8000c10:	2200      	movs	r2, #0
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 fdc3 	bl	800179e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Pin;
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2201      	movs	r2, #1
 8000c24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 8000c32:	1d3a      	adds	r2, r7, #4
 8000c34:	23a0      	movs	r3, #160	; 0xa0
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	0011      	movs	r1, r2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 fc14 	bl	8001468 <HAL_GPIO_Init>

}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b006      	add	sp, #24
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f000 fac2 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c54:	f000 f888 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c58:	f7ff ffc0 	bl	8000bdc <MX_GPIO_Init>
  MX_TIM6_Init();
 8000c5c:	f000 f916 	bl	8000e8c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000c60:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <main+0xec>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f001 fbba 	bl	80023dc <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DHT22_Start();
 8000c68:	f000 f9ee 	bl	8001048 <DHT22_Start>
	  Presence = DHT22_Check_Response();
 8000c6c:	f000 fa19 	bl	80010a2 <DHT22_Check_Response>
 8000c70:	0003      	movs	r3, r0
 8000c72:	001a      	movs	r2, r3
 8000c74:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <main+0xf0>)
 8000c76:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT22_Read ();
 8000c78:	f000 fa53 	bl	8001122 <DHT22_Read>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	001a      	movs	r2, r3
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <main+0xf4>)
 8000c82:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT22_Read ();
 8000c84:	f000 fa4d 	bl	8001122 <DHT22_Read>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <main+0xf8>)
 8000c8e:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read ();
 8000c90:	f000 fa47 	bl	8001122 <DHT22_Read>
 8000c94:	0003      	movs	r3, r0
 8000c96:	001a      	movs	r2, r3
 8000c98:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <main+0xfc>)
 8000c9a:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read ();
 8000c9c:	f000 fa41 	bl	8001122 <DHT22_Read>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <main+0x100>)
 8000ca6:	701a      	strb	r2, [r3, #0]
	  SUM = DHT22_Read();
 8000ca8:	f000 fa3b 	bl	8001122 <DHT22_Read>
 8000cac:	0003      	movs	r3, r0
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <main+0x104>)
 8000cb2:	801a      	strh	r2, [r3, #0]

	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <main+0xfc>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <main+0x100>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <main+0x108>)
 8000cca:	801a      	strh	r2, [r3, #0]
	  RH = ((Rh_byte1<<8)|Rh_byte2);
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <main+0xf4>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <main+0xf8>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <main+0x10c>)
 8000ce2:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) (TEMP/10.0);
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <main+0x108>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fe95 	bl	8000a18 <__aeabi_i2d>
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <main+0x110>)
 8000cf2:	f7ff fba9 	bl	8000448 <__aeabi_ddiv>
 8000cf6:	0002      	movs	r2, r0
 8000cf8:	000b      	movs	r3, r1
 8000cfa:	0010      	movs	r0, r2
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	f7ff febb 	bl	8000a78 <__aeabi_d2f>
 8000d02:	1c02      	adds	r2, r0, #0
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <main+0x114>)
 8000d06:	601a      	str	r2, [r3, #0]
	  Humidity = (float) (RH/10.0);
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <main+0x10c>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff fe83 	bl	8000a18 <__aeabi_i2d>
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <main+0x110>)
 8000d16:	f7ff fb97 	bl	8000448 <__aeabi_ddiv>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	000b      	movs	r3, r1
 8000d1e:	0010      	movs	r0, r2
 8000d20:	0019      	movs	r1, r3
 8000d22:	f7ff fea9 	bl	8000a78 <__aeabi_d2f>
 8000d26:	1c02      	adds	r2, r0, #0
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <main+0x118>)
 8000d2a:	601a      	str	r2, [r3, #0]

	  HAL_Delay(1000);
 8000d2c:	23fa      	movs	r3, #250	; 0xfa
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	0018      	movs	r0, r3
 8000d32:	f000 fac1 	bl	80012b8 <HAL_Delay>
	  DHT22_Start();
 8000d36:	e797      	b.n	8000c68 <main+0x1c>
 8000d38:	20000040 	.word	0x20000040
 8000d3c:	20000030 	.word	0x20000030
 8000d40:	20000032 	.word	0x20000032
 8000d44:	20000039 	.word	0x20000039
 8000d48:	20000038 	.word	0x20000038
 8000d4c:	2000003c 	.word	0x2000003c
 8000d50:	2000003a 	.word	0x2000003a
 8000d54:	20000036 	.word	0x20000036
 8000d58:	20000034 	.word	0x20000034
 8000d5c:	40240000 	.word	0x40240000
 8000d60:	20000028 	.word	0x20000028
 8000d64:	2000002c 	.word	0x2000002c

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b095      	sub	sp, #84	; 0x54
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	2418      	movs	r4, #24
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	0018      	movs	r0, r3
 8000d74:	2338      	movs	r3, #56	; 0x38
 8000d76:	001a      	movs	r2, r3
 8000d78:	2100      	movs	r1, #0
 8000d7a:	f001 fc59 	bl	8002630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	0018      	movs	r0, r3
 8000d82:	2314      	movs	r3, #20
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f001 fc52 	bl	8002630 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <SystemClock_Config+0xb0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <SystemClock_Config+0xb4>)
 8000d92:	401a      	ands	r2, r3
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <SystemClock_Config+0xb0>)
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	0109      	lsls	r1, r1, #4
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9e:	0021      	movs	r1, r4
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2202      	movs	r2, #2
 8000da4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2201      	movs	r2, #1
 8000daa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2210      	movs	r2, #16
 8000db0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2202      	movs	r2, #2
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	02d2      	lsls	r2, r2, #11
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	03d2      	lsls	r2, r2, #15
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 fd01 	bl	80017d8 <HAL_RCC_OscConfig>
 8000dd6:	1e03      	subs	r3, r0, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000dda:	f000 f821 	bl	8000e20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	220f      	movs	r2, #15
 8000de2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2203      	movs	r2, #3
 8000de8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2101      	movs	r1, #1
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 f8bd 	bl	8001f80 <HAL_RCC_ClockConfig>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e0a:	f000 f809 	bl	8000e20 <Error_Handler>
  }
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b015      	add	sp, #84	; 0x54
 8000e14:	bd90      	pop	{r4, r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	40007000 	.word	0x40007000
 8000e1c:	ffffe7ff 	.word	0xffffe7ff

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_MspInit+0x24>)
 8000e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_MspInit+0x24>)
 8000e36:	2101      	movs	r1, #1
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <HAL_MspInit+0x24>)
 8000e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_MspInit+0x24>)
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	0549      	lsls	r1, r1, #21
 8000e46:	430a      	orrs	r2, r1
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 fa02 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e92:	003b      	movs	r3, r7
 8000e94:	0018      	movs	r0, r3
 8000e96:	2308      	movs	r3, #8
 8000e98:	001a      	movs	r2, r3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f001 fbc8 	bl	8002630 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_TIM6_Init+0x6c>)
 8000ea2:	4a16      	ldr	r2, [pc, #88]	; (8000efc <MX_TIM6_Init+0x70>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32-1;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_TIM6_Init+0x6c>)
 8000ea8:	221f      	movs	r2, #31
 8000eaa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_TIM6_Init+0x6c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_TIM6_Init+0x6c>)
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <MX_TIM6_Init+0x74>)
 8000eb6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_TIM6_Init+0x6c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_TIM6_Init+0x6c>)
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f001 fa4b 	bl	800235c <HAL_TIM_Base_Init>
 8000ec6:	1e03      	subs	r3, r0, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000eca:	f7ff ffa9 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ece:	003b      	movs	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed4:	003b      	movs	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000eda:	003a      	movs	r2, r7
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_TIM6_Init+0x6c>)
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 fb23 	bl	800252c <HAL_TIMEx_MasterConfigSynchronization>
 8000ee6:	1e03      	subs	r3, r0, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000eea:	f7ff ff99 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	20000040 	.word	0x20000040
 8000efc:	40001000 	.word	0x40001000
 8000f00:	0000ffff 	.word	0x0000ffff

08000f04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_TIM_Base_MspInit+0x28>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d105      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_TIM_Base_MspInit+0x2c>)
 8000f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_TIM_Base_MspInit+0x2c>)
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40001000 	.word	0x40001000
 8000f30:	40021000 	.word	0x40021000

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3a:	490e      	ldr	r1, [pc, #56]	; (8000f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <LoopForever+0xe>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f50:	4c0b      	ldr	r4, [pc, #44]	; (8000f80 <LoopForever+0x16>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f5e:	f7ff ff90 	bl	8000e82 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f001 fb41 	bl	80025e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fe71 	bl	8000c4c <main>

08000f6a <LoopForever>:

LoopForever:
    b LoopForever
 8000f6a:	e7fe      	b.n	8000f6a <LoopForever>
   ldr   r0, =_estack
 8000f6c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f78:	080026c4 	.word	0x080026c4
  ldr r2, =_sbss
 8000f7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f80:	20000084 	.word	0x20000084

08000f84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC1_COMP_IRQHandler>
	...

08000f88 <delay>:
 * https://controllerstech.com/temperature-measurement-using-dht22-in-stm32/
 */
#include<dht22.h>

void delay (uint16_t time)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	0002      	movs	r2, r0
 8000f90:	1dbb      	adds	r3, r7, #6
 8000f92:	801a      	strh	r2, [r3, #0]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <delay+0x30>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <delay+0x30>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa4:	1dbb      	adds	r3, r7, #6
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3f8      	bcc.n	8000f9e <delay+0x16>
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	20000040 	.word	0x20000040

08000fbc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	000a      	movs	r2, r1
 8000fc6:	1cbb      	adds	r3, r7, #2
 8000fc8:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	240c      	movs	r4, #12
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	0018      	movs	r0, r3
 8000fd0:	2314      	movs	r3, #20
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	f001 fb2b 	bl	8002630 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fda:	1cbb      	adds	r3, r7, #2
 8000fdc:	881a      	ldrh	r2, [r3, #0]
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fee:	193a      	adds	r2, r7, r4
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f000 fa37 	bl	8001468 <HAL_GPIO_Init>
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b009      	add	sp, #36	; 0x24
 8001000:	bd90      	pop	{r4, r7, pc}

08001002 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001002:	b590      	push	{r4, r7, lr}
 8001004:	b089      	sub	sp, #36	; 0x24
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	000a      	movs	r2, r1
 800100c:	1cbb      	adds	r3, r7, #2
 800100e:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	240c      	movs	r4, #12
 8001012:	193b      	adds	r3, r7, r4
 8001014:	0018      	movs	r0, r3
 8001016:	2314      	movs	r3, #20
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f001 fb08 	bl	8002630 <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001020:	1cbb      	adds	r3, r7, #2
 8001022:	881a      	ldrh	r2, [r3, #0]
 8001024:	193b      	adds	r3, r7, r4
 8001026:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001028:	193b      	adds	r3, r7, r4
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102e:	193b      	adds	r3, r7, r4
 8001030:	2201      	movs	r2, #1
 8001032:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001034:	193a      	adds	r2, r7, r4
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	0011      	movs	r1, r2
 800103a:	0018      	movs	r0, r3
 800103c:	f000 fa14 	bl	8001468 <HAL_GPIO_Init>
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b009      	add	sp, #36	; 0x24
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <DHT22_Start>:

void DHT22_Start (void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	00da      	lsls	r2, r3, #3
 8001050:	23a0      	movs	r3, #160	; 0xa0
 8001052:	05db      	lsls	r3, r3, #23
 8001054:	0011      	movs	r1, r2
 8001056:	0018      	movs	r0, r3
 8001058:	f7ff ffb0 	bl	8000fbc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	00d9      	lsls	r1, r3, #3
 8001060:	23a0      	movs	r3, #160	; 0xa0
 8001062:	05db      	lsls	r3, r3, #23
 8001064:	2200      	movs	r2, #0
 8001066:	0018      	movs	r0, r3
 8001068:	f000 fb99 	bl	800179e <HAL_GPIO_WritePin>
	delay(1200);   // wait for > 1ms
 800106c:	2396      	movs	r3, #150	; 0x96
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff ff89 	bl	8000f88 <delay>

	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	00d9      	lsls	r1, r3, #3
 800107a:	23a0      	movs	r3, #160	; 0xa0
 800107c:	05db      	lsls	r3, r3, #23
 800107e:	2201      	movs	r2, #1
 8001080:	0018      	movs	r0, r3
 8001082:	f000 fb8c 	bl	800179e <HAL_GPIO_WritePin>
	delay (20);   // wait for 30us
 8001086:	2014      	movs	r0, #20
 8001088:	f7ff ff7e 	bl	8000f88 <delay>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	00da      	lsls	r2, r3, #3
 8001090:	23a0      	movs	r3, #160	; 0xa0
 8001092:	05db      	lsls	r3, r3, #23
 8001094:	0011      	movs	r1, r2
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff ffb3 	bl	8001002 <Set_Pin_Input>
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	00da      	lsls	r2, r3, #3
 80010ac:	23a0      	movs	r3, #160	; 0xa0
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	0011      	movs	r1, r2
 80010b2:	0018      	movs	r0, r3
 80010b4:	f7ff ffa5 	bl	8001002 <Set_Pin_Input>
	uint8_t Response = 0;
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
	delay (40);  // wait for 40us
 80010be:	2028      	movs	r0, #40	; 0x28
 80010c0:	f7ff ff62 	bl	8000f88 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	00da      	lsls	r2, r3, #3
 80010c8:	23a0      	movs	r3, #160	; 0xa0
 80010ca:	05db      	lsls	r3, r3, #23
 80010cc:	0011      	movs	r1, r2
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 fb48 	bl	8001764 <HAL_GPIO_ReadPin>
 80010d4:	1e03      	subs	r3, r0, #0
 80010d6:	d113      	bne.n	8001100 <DHT22_Check_Response+0x5e>
	{
		delay (80);   // wait for 80us
 80010d8:	2050      	movs	r0, #80	; 0x50
 80010da:	f7ff ff55 	bl	8000f88 <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	00da      	lsls	r2, r3, #3
 80010e2:	23a0      	movs	r3, #160	; 0xa0
 80010e4:	05db      	lsls	r3, r3, #23
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f000 fb3b 	bl	8001764 <HAL_GPIO_ReadPin>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d003      	beq.n	80010fa <DHT22_Check_Response+0x58>
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	e002      	b.n	8001100 <DHT22_Check_Response+0x5e>
		else Response = -1;
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	701a      	strb	r2, [r3, #0]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	00da      	lsls	r2, r3, #3
 8001106:	23a0      	movs	r3, #160	; 0xa0
 8001108:	05db      	lsls	r3, r3, #23
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f000 fb29 	bl	8001764 <HAL_GPIO_ReadPin>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d1f5      	bne.n	8001102 <DHT22_Check_Response+0x60>
	return Response;
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}

08001122 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001128:	1dbb      	adds	r3, r7, #6
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e048      	b.n	80011c2 <DHT22_Read+0xa0>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	00da      	lsls	r2, r3, #3
 8001136:	23a0      	movs	r3, #160	; 0xa0
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f000 fb11 	bl	8001764 <HAL_GPIO_ReadPin>
 8001142:	1e03      	subs	r3, r0, #0
 8001144:	d0f5      	beq.n	8001132 <DHT22_Read+0x10>
		delay (40);   // wait for 40 us
 8001146:	2028      	movs	r0, #40	; 0x28
 8001148:	f7ff ff1e 	bl	8000f88 <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	00da      	lsls	r2, r3, #3
 8001150:	23a0      	movs	r3, #160	; 0xa0
 8001152:	05db      	lsls	r3, r3, #23
 8001154:	0011      	movs	r1, r2
 8001156:	0018      	movs	r0, r3
 8001158:	f000 fb04 	bl	8001764 <HAL_GPIO_ReadPin>
 800115c:	1e03      	subs	r3, r0, #0
 800115e:	d111      	bne.n	8001184 <DHT22_Read+0x62>
		{
			i&= ~(1<<(7-j));   // write 0
 8001160:	1dbb      	adds	r3, r7, #6
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2207      	movs	r2, #7
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2201      	movs	r2, #1
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	b25b      	sxtb	r3, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	b25b      	sxtb	r3, r3
 8001174:	1dfa      	adds	r2, r7, #7
 8001176:	7812      	ldrb	r2, [r2, #0]
 8001178:	b252      	sxtb	r2, r2
 800117a:	4013      	ands	r3, r2
 800117c:	b25a      	sxtb	r2, r3
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e00e      	b.n	80011a2 <DHT22_Read+0x80>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001184:	1dbb      	adds	r3, r7, #6
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2207      	movs	r2, #7
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2201      	movs	r2, #1
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	b25a      	sxtb	r2, r3
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b25b      	sxtb	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b25a      	sxtb	r2, r3
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	701a      	strb	r2, [r3, #0]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));  // wait for the pin to go low
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	00da      	lsls	r2, r3, #3
 80011a8:	23a0      	movs	r3, #160	; 0xa0
 80011aa:	05db      	lsls	r3, r3, #23
 80011ac:	0011      	movs	r1, r2
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 fad8 	bl	8001764 <HAL_GPIO_ReadPin>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d1f5      	bne.n	80011a4 <DHT22_Read+0x82>
	for (j=0;j<8;j++)
 80011b8:	1dbb      	adds	r3, r7, #6
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	1dbb      	adds	r3, r7, #6
 80011be:	3201      	adds	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	1dbb      	adds	r3, r7, #6
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d9b2      	bls.n	8001130 <DHT22_Read+0xe>
	}

	return i;
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_Init+0x3c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Init+0x3c>)
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f811 	bl	8001218 <HAL_InitTick>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d003      	beq.n	8001202 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e001      	b.n	8001206 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001202:	f7ff fe13 	bl	8000e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_InitTick+0x5c>)
 8001222:	681c      	ldr	r4, [r3, #0]
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_InitTick+0x60>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	0019      	movs	r1, r3
 800122a:	23fa      	movs	r3, #250	; 0xfa
 800122c:	0098      	lsls	r0, r3, #2
 800122e:	f7fe ff6b 	bl	8000108 <__udivsi3>
 8001232:	0003      	movs	r3, r0
 8001234:	0019      	movs	r1, r3
 8001236:	0020      	movs	r0, r4
 8001238:	f7fe ff66 	bl	8000108 <__udivsi3>
 800123c:	0003      	movs	r3, r0
 800123e:	0018      	movs	r0, r3
 8001240:	f000 f905 	bl	800144e <HAL_SYSTICK_Config>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d001      	beq.n	800124c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e00f      	b.n	800126c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d80b      	bhi.n	800126a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	2301      	movs	r3, #1
 8001256:	425b      	negs	r3, r3
 8001258:	2200      	movs	r2, #0
 800125a:	0018      	movs	r0, r3
 800125c:	f000 f8e2 	bl	8001424 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_InitTick+0x64>)
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b003      	add	sp, #12
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	001a      	movs	r2, r3
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x20>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	18d2      	adds	r2, r2, r3
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_IncTick+0x20>)
 8001292:	601a      	str	r2, [r3, #0]
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000080 	.word	0x20000080

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b02      	ldr	r3, [pc, #8]	; (80012b4 <HAL_GetTick+0x10>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	20000080 	.word	0x20000080

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff fff0 	bl	80012a4 <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3301      	adds	r3, #1
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	001a      	movs	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	189b      	adds	r3, r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	f7ff ffe0 	bl	80012a4 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b004      	add	sp, #16
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	20000008 	.word	0x20000008

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	0002      	movs	r2, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b7f      	cmp	r3, #127	; 0x7f
 8001314:	d828      	bhi.n	8001368 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001316:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <__NVIC_SetPriority+0xd4>)
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b25b      	sxtb	r3, r3
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	33c0      	adds	r3, #192	; 0xc0
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	589b      	ldr	r3, [r3, r2]
 8001326:	1dfa      	adds	r2, r7, #7
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	0011      	movs	r1, r2
 800132c:	2203      	movs	r2, #3
 800132e:	400a      	ands	r2, r1
 8001330:	00d2      	lsls	r2, r2, #3
 8001332:	21ff      	movs	r1, #255	; 0xff
 8001334:	4091      	lsls	r1, r2
 8001336:	000a      	movs	r2, r1
 8001338:	43d2      	mvns	r2, r2
 800133a:	401a      	ands	r2, r3
 800133c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	019b      	lsls	r3, r3, #6
 8001342:	22ff      	movs	r2, #255	; 0xff
 8001344:	401a      	ands	r2, r3
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	0018      	movs	r0, r3
 800134c:	2303      	movs	r3, #3
 800134e:	4003      	ands	r3, r0
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001354:	481f      	ldr	r0, [pc, #124]	; (80013d4 <__NVIC_SetPriority+0xd4>)
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	430a      	orrs	r2, r1
 8001360:	33c0      	adds	r3, #192	; 0xc0
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001366:	e031      	b.n	80013cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <__NVIC_SetPriority+0xd8>)
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	0019      	movs	r1, r3
 8001370:	230f      	movs	r3, #15
 8001372:	400b      	ands	r3, r1
 8001374:	3b08      	subs	r3, #8
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3306      	adds	r3, #6
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	18d3      	adds	r3, r2, r3
 800137e:	3304      	adds	r3, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1dfa      	adds	r2, r7, #7
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	0011      	movs	r1, r2
 8001388:	2203      	movs	r2, #3
 800138a:	400a      	ands	r2, r1
 800138c:	00d2      	lsls	r2, r2, #3
 800138e:	21ff      	movs	r1, #255	; 0xff
 8001390:	4091      	lsls	r1, r2
 8001392:	000a      	movs	r2, r1
 8001394:	43d2      	mvns	r2, r2
 8001396:	401a      	ands	r2, r3
 8001398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	019b      	lsls	r3, r3, #6
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	401a      	ands	r2, r3
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	0018      	movs	r0, r3
 80013a8:	2303      	movs	r3, #3
 80013aa:	4003      	ands	r3, r0
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <__NVIC_SetPriority+0xd8>)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	001c      	movs	r4, r3
 80013b8:	230f      	movs	r3, #15
 80013ba:	4023      	ands	r3, r4
 80013bc:	3b08      	subs	r3, #8
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	430a      	orrs	r2, r1
 80013c2:	3306      	adds	r3, #6
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	18c3      	adds	r3, r0, r3
 80013c8:	3304      	adds	r3, #4
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b003      	add	sp, #12
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	1e5a      	subs	r2, r3, #1
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	045b      	lsls	r3, r3, #17
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d301      	bcc.n	80013f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f0:	2301      	movs	r3, #1
 80013f2:	e010      	b.n	8001416 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <SysTick_Config+0x44>)
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	3a01      	subs	r2, #1
 80013fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fc:	2301      	movs	r3, #1
 80013fe:	425b      	negs	r3, r3
 8001400:	2103      	movs	r1, #3
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff ff7c 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x44>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x44>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b002      	add	sp, #8
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	210f      	movs	r1, #15
 8001430:	187b      	adds	r3, r7, r1
 8001432:	1c02      	adds	r2, r0, #0
 8001434:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	187b      	adds	r3, r7, r1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b25b      	sxtb	r3, r3
 800143e:	0011      	movs	r1, r2
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff ff5d 	bl	8001300 <__NVIC_SetPriority>
}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff ffbf 	bl	80013dc <SysTick_Config>
 800145e:	0003      	movs	r3, r0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800147e:	e155      	b.n	800172c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4091      	lsls	r1, r2
 800148a:	000a      	movs	r2, r1
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d100      	bne.n	8001498 <HAL_GPIO_Init+0x30>
 8001496:	e146      	b.n	8001726 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d00b      	beq.n	80014b8 <HAL_GPIO_Init+0x50>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d007      	beq.n	80014b8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ac:	2b11      	cmp	r3, #17
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	43da      	mvns	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	409a      	lsls	r2, r3
 80014da:	0013      	movs	r3, r2
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	43da      	mvns	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	2201      	movs	r2, #1
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	43da      	mvns	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	409a      	lsls	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0xf2>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b12      	cmp	r3, #18
 8001558:	d123      	bne.n	80015a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	58d3      	ldr	r3, [r2, r3]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2207      	movs	r2, #7
 800156c:	4013      	ands	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	43da      	mvns	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2107      	movs	r1, #7
 8001586:	400b      	ands	r3, r1
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	6939      	ldr	r1, [r7, #16]
 80015a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	43da      	mvns	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2203      	movs	r2, #3
 80015c0:	401a      	ands	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	055b      	lsls	r3, r3, #21
 80015de:	4013      	ands	r3, r2
 80015e0:	d100      	bne.n	80015e4 <HAL_GPIO_Init+0x17c>
 80015e2:	e0a0      	b.n	8001726 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e4:	4b57      	ldr	r3, [pc, #348]	; (8001744 <HAL_GPIO_Init+0x2dc>)
 80015e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e8:	4b56      	ldr	r3, [pc, #344]	; (8001744 <HAL_GPIO_Init+0x2dc>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	430a      	orrs	r2, r1
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f0:	4a55      	ldr	r2, [pc, #340]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	589b      	ldr	r3, [r3, r2]
 80015fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2203      	movs	r2, #3
 8001602:	4013      	ands	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	409a      	lsls	r2, r3
 800160a:	0013      	movs	r3, r2
 800160c:	43da      	mvns	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	23a0      	movs	r3, #160	; 0xa0
 8001618:	05db      	lsls	r3, r3, #23
 800161a:	429a      	cmp	r2, r3
 800161c:	d01f      	beq.n	800165e <HAL_GPIO_Init+0x1f6>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4a      	ldr	r2, [pc, #296]	; (800174c <HAL_GPIO_Init+0x2e4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d019      	beq.n	800165a <HAL_GPIO_Init+0x1f2>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a49      	ldr	r2, [pc, #292]	; (8001750 <HAL_GPIO_Init+0x2e8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0x1ee>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a48      	ldr	r2, [pc, #288]	; (8001754 <HAL_GPIO_Init+0x2ec>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00d      	beq.n	8001652 <HAL_GPIO_Init+0x1ea>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a47      	ldr	r2, [pc, #284]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_GPIO_Init+0x1e6>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a46      	ldr	r2, [pc, #280]	; (800175c <HAL_GPIO_Init+0x2f4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_GPIO_Init+0x1e2>
 8001646:	2305      	movs	r3, #5
 8001648:	e00a      	b.n	8001660 <HAL_GPIO_Init+0x1f8>
 800164a:	2306      	movs	r3, #6
 800164c:	e008      	b.n	8001660 <HAL_GPIO_Init+0x1f8>
 800164e:	2304      	movs	r3, #4
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x1f8>
 8001652:	2303      	movs	r3, #3
 8001654:	e004      	b.n	8001660 <HAL_GPIO_Init+0x1f8>
 8001656:	2302      	movs	r3, #2
 8001658:	e002      	b.n	8001660 <HAL_GPIO_Init+0x1f8>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x1f8>
 800165e:	2300      	movs	r3, #0
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	2103      	movs	r1, #3
 8001664:	400a      	ands	r2, r1
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4093      	lsls	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001670:	4935      	ldr	r1, [pc, #212]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167e:	4b38      	ldr	r3, [pc, #224]	; (8001760 <HAL_GPIO_Init+0x2f8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43da      	mvns	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	4013      	ands	r3, r2
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HAL_GPIO_Init+0x2f8>)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016a8:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_GPIO_Init+0x2f8>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43da      	mvns	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	029b      	lsls	r3, r3, #10
 80016c0:	4013      	ands	r3, r2
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_GPIO_Init+0x2f8>)
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b23      	ldr	r3, [pc, #140]	; (8001760 <HAL_GPIO_Init+0x2f8>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43da      	mvns	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	035b      	lsls	r3, r3, #13
 80016ea:	4013      	ands	r3, r2
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_GPIO_Init+0x2f8>)
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_GPIO_Init+0x2f8>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43da      	mvns	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	039b      	lsls	r3, r3, #14
 8001714:	4013      	ands	r3, r2
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_GPIO_Init+0x2f8>)
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	40da      	lsrs	r2, r3
 8001734:	1e13      	subs	r3, r2, #0
 8001736:	d000      	beq.n	800173a <HAL_GPIO_Init+0x2d2>
 8001738:	e6a2      	b.n	8001480 <HAL_GPIO_Init+0x18>
  }
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b006      	add	sp, #24
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	40010000 	.word	0x40010000
 800174c:	50000400 	.word	0x50000400
 8001750:	50000800 	.word	0x50000800
 8001754:	50000c00 	.word	0x50000c00
 8001758:	50001000 	.word	0x50001000
 800175c:	50001c00 	.word	0x50001c00
 8001760:	40010400 	.word	0x40010400

08001764 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	000a      	movs	r2, r1
 800176e:	1cbb      	adds	r3, r7, #2
 8001770:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	1cba      	adds	r2, r7, #2
 8001778:	8812      	ldrh	r2, [r2, #0]
 800177a:	4013      	ands	r3, r2
 800177c:	d004      	beq.n	8001788 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800177e:	230f      	movs	r3, #15
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e003      	b.n	8001790 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001788:	230f      	movs	r3, #15
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001790:	230f      	movs	r3, #15
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	781b      	ldrb	r3, [r3, #0]
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b004      	add	sp, #16
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	0008      	movs	r0, r1
 80017a8:	0011      	movs	r1, r2
 80017aa:	1cbb      	adds	r3, r7, #2
 80017ac:	1c02      	adds	r2, r0, #0
 80017ae:	801a      	strh	r2, [r3, #0]
 80017b0:	1c7b      	adds	r3, r7, #1
 80017b2:	1c0a      	adds	r2, r1, #0
 80017b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b6:	1c7b      	adds	r3, r7, #1
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017be:	1cbb      	adds	r3, r7, #2
 80017c0:	881a      	ldrh	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80017c6:	e003      	b.n	80017d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80017c8:	1cbb      	adds	r3, r7, #2
 80017ca:	881a      	ldrh	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f000 fbbf 	bl	8001f6a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ec:	4bc9      	ldr	r3, [pc, #804]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	220c      	movs	r2, #12
 80017f2:	4013      	ands	r3, r2
 80017f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f6:	4bc7      	ldr	r3, [pc, #796]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	025b      	lsls	r3, r3, #9
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	4013      	ands	r3, r2
 800180a:	d100      	bne.n	800180e <HAL_RCC_OscConfig+0x36>
 800180c:	e07e      	b.n	800190c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	2b08      	cmp	r3, #8
 8001812:	d007      	beq.n	8001824 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b0c      	cmp	r3, #12
 8001818:	d112      	bne.n	8001840 <HAL_RCC_OscConfig+0x68>
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	025b      	lsls	r3, r3, #9
 8001820:	429a      	cmp	r2, r3
 8001822:	d10d      	bne.n	8001840 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	4bbb      	ldr	r3, [pc, #748]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	029b      	lsls	r3, r3, #10
 800182c:	4013      	ands	r3, r2
 800182e:	d100      	bne.n	8001832 <HAL_RCC_OscConfig+0x5a>
 8001830:	e06b      	b.n	800190a <HAL_RCC_OscConfig+0x132>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d167      	bne.n	800190a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	f000 fb95 	bl	8001f6a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	025b      	lsls	r3, r3, #9
 8001848:	429a      	cmp	r2, r3
 800184a:	d107      	bne.n	800185c <HAL_RCC_OscConfig+0x84>
 800184c:	4bb1      	ldr	r3, [pc, #708]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4bb0      	ldr	r3, [pc, #704]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001852:	2180      	movs	r1, #128	; 0x80
 8001854:	0249      	lsls	r1, r1, #9
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e027      	b.n	80018ac <HAL_RCC_OscConfig+0xd4>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	23a0      	movs	r3, #160	; 0xa0
 8001862:	02db      	lsls	r3, r3, #11
 8001864:	429a      	cmp	r2, r3
 8001866:	d10e      	bne.n	8001886 <HAL_RCC_OscConfig+0xae>
 8001868:	4baa      	ldr	r3, [pc, #680]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4ba9      	ldr	r3, [pc, #676]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 800186e:	2180      	movs	r1, #128	; 0x80
 8001870:	02c9      	lsls	r1, r1, #11
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	4ba7      	ldr	r3, [pc, #668]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4ba6      	ldr	r3, [pc, #664]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0249      	lsls	r1, r1, #9
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e012      	b.n	80018ac <HAL_RCC_OscConfig+0xd4>
 8001886:	4ba3      	ldr	r3, [pc, #652]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4ba2      	ldr	r3, [pc, #648]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 800188c:	49a2      	ldr	r1, [pc, #648]	; (8001b18 <HAL_RCC_OscConfig+0x340>)
 800188e:	400a      	ands	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	4ba0      	ldr	r3, [pc, #640]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	025b      	lsls	r3, r3, #9
 800189a:	4013      	ands	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4b9c      	ldr	r3, [pc, #624]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b9b      	ldr	r3, [pc, #620]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 80018a6:	499d      	ldr	r1, [pc, #628]	; (8001b1c <HAL_RCC_OscConfig+0x344>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d015      	beq.n	80018e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fcf6 	bl	80012a4 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018bc:	e009      	b.n	80018d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018be:	f7ff fcf1 	bl	80012a4 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	; 0x64
 80018ca:	d902      	bls.n	80018d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	f000 fb4c 	bl	8001f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018d2:	4b90      	ldr	r3, [pc, #576]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	029b      	lsls	r3, r3, #10
 80018da:	4013      	ands	r3, r2
 80018dc:	d0ef      	beq.n	80018be <HAL_RCC_OscConfig+0xe6>
 80018de:	e015      	b.n	800190c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fce0 	bl	80012a4 <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ea:	f7ff fcdb 	bl	80012a4 <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b64      	cmp	r3, #100	; 0x64
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e336      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018fc:	4b85      	ldr	r3, [pc, #532]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	029b      	lsls	r3, r3, #10
 8001904:	4013      	ands	r3, r2
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x112>
 8001908:	e000      	b.n	800190c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2202      	movs	r2, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d100      	bne.n	8001918 <HAL_RCC_OscConfig+0x140>
 8001916:	e099      	b.n	8001a4c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	2220      	movs	r2, #32
 8001922:	4013      	ands	r3, r2
 8001924:	d009      	beq.n	800193a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001926:	4b7b      	ldr	r3, [pc, #492]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b7a      	ldr	r3, [pc, #488]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 800192c:	2120      	movs	r1, #32
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	2220      	movs	r2, #32
 8001936:	4393      	bics	r3, r2
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	2b04      	cmp	r3, #4
 800193e:	d005      	beq.n	800194c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d13e      	bne.n	80019c4 <HAL_RCC_OscConfig+0x1ec>
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d13b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800194c:	4b71      	ldr	r3, [pc, #452]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2204      	movs	r2, #4
 8001952:	4013      	ands	r3, r2
 8001954:	d004      	beq.n	8001960 <HAL_RCC_OscConfig+0x188>
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e304      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b6c      	ldr	r3, [pc, #432]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x348>)
 8001966:	4013      	ands	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	021a      	lsls	r2, r3, #8
 8001970:	4b68      	ldr	r3, [pc, #416]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001972:	430a      	orrs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001976:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2209      	movs	r2, #9
 800197c:	4393      	bics	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	4b64      	ldr	r3, [pc, #400]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001988:	f000 fc42 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 800198c:	0001      	movs	r1, r0
 800198e:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	220f      	movs	r2, #15
 8001996:	4013      	ands	r3, r2
 8001998:	4a62      	ldr	r2, [pc, #392]	; (8001b24 <HAL_RCC_OscConfig+0x34c>)
 800199a:	5cd3      	ldrb	r3, [r2, r3]
 800199c:	000a      	movs	r2, r1
 800199e:	40da      	lsrs	r2, r3
 80019a0:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_RCC_OscConfig+0x350>)
 80019a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80019a4:	4b61      	ldr	r3, [pc, #388]	; (8001b2c <HAL_RCC_OscConfig+0x354>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2513      	movs	r5, #19
 80019aa:	197c      	adds	r4, r7, r5
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7ff fc33 	bl	8001218 <HAL_InitTick>
 80019b2:	0003      	movs	r3, r0
 80019b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80019b6:	197b      	adds	r3, r7, r5
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d046      	beq.n	8001a4c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80019be:	197b      	adds	r3, r7, r5
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	e2d2      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d027      	beq.n	8001a1a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019ca:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2209      	movs	r2, #9
 80019d0:	4393      	bics	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	4b4f      	ldr	r3, [pc, #316]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 80019d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fc62 	bl	80012a4 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff fc5d 	bl	80012a4 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e2b8      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019f8:	4b46      	ldr	r3, [pc, #280]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2204      	movs	r2, #4
 80019fe:	4013      	ands	r3, r2
 8001a00:	d0f1      	beq.n	80019e6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4a46      	ldr	r2, [pc, #280]	; (8001b20 <HAL_RCC_OscConfig+0x348>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	021a      	lsls	r2, r3, #8
 8001a12:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001a14:	430a      	orrs	r2, r1
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	e018      	b.n	8001a4c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001a20:	2101      	movs	r1, #1
 8001a22:	438a      	bics	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fc3d 	bl	80012a4 <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a30:	f7ff fc38 	bl	80012a4 <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e293      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2204      	movs	r2, #4
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d1f1      	bne.n	8001a30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2210      	movs	r2, #16
 8001a52:	4013      	ands	r3, r2
 8001a54:	d100      	bne.n	8001a58 <HAL_RCC_OscConfig+0x280>
 8001a56:	e0a2      	b.n	8001b9e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d140      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d005      	beq.n	8001a76 <HAL_RCC_OscConfig+0x29e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e279      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a76:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4a2d      	ldr	r2, [pc, #180]	; (8001b30 <HAL_RCC_OscConfig+0x358>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	0019      	movs	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a84:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	0a19      	lsrs	r1, r3, #8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	061a      	lsls	r2, r3, #24
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	0b5b      	lsrs	r3, r3, #13
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	0212      	lsls	r2, r2, #8
 8001aaa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	400b      	ands	r3, r1
 8001ab6:	491b      	ldr	r1, [pc, #108]	; (8001b24 <HAL_RCC_OscConfig+0x34c>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <HAL_RCC_OscConfig+0x350>)
 8001abe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_RCC_OscConfig+0x354>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2513      	movs	r5, #19
 8001ac6:	197c      	adds	r4, r7, r5
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f7ff fba5 	bl	8001218 <HAL_InitTick>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ad2:	197b      	adds	r3, r7, r5
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d061      	beq.n	8001b9e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001ada:	197b      	adds	r3, r7, r5
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	e244      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d040      	beq.n	8001b6a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_OscConfig+0x33c>)
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	0049      	lsls	r1, r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fbd5 	bl	80012a4 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001afe:	e019      	b.n	8001b34 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b00:	f7ff fbd0 	bl	80012a4 <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d912      	bls.n	8001b34 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e22b      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	40021000 	.word	0x40021000
 8001b18:	fffeffff 	.word	0xfffeffff
 8001b1c:	fffbffff 	.word	0xfffbffff
 8001b20:	ffffe0ff 	.word	0xffffe0ff
 8001b24:	08002698 	.word	0x08002698
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b34:	4bca      	ldr	r3, [pc, #808]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d0df      	beq.n	8001b00 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b40:	4bc7      	ldr	r3, [pc, #796]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4ac7      	ldr	r2, [pc, #796]	; (8001e64 <HAL_RCC_OscConfig+0x68c>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4e:	4bc4      	ldr	r3, [pc, #784]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b54:	4bc2      	ldr	r3, [pc, #776]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	0a19      	lsrs	r1, r3, #8
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	061a      	lsls	r2, r3, #24
 8001b62:	4bbf      	ldr	r3, [pc, #764]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	e019      	b.n	8001b9e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b6a:	4bbd      	ldr	r3, [pc, #756]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4bbc      	ldr	r3, [pc, #752]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001b70:	49bd      	ldr	r1, [pc, #756]	; (8001e68 <HAL_RCC_OscConfig+0x690>)
 8001b72:	400a      	ands	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff fb95 	bl	80012a4 <HAL_GetTick>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b80:	f7ff fb90 	bl	80012a4 <HAL_GetTick>
 8001b84:	0002      	movs	r2, r0
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e1eb      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b92:	4bb3      	ldr	r3, [pc, #716]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d036      	beq.n	8001c16 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d019      	beq.n	8001be4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb0:	4bab      	ldr	r3, [pc, #684]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001bb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bb4:	4baa      	ldr	r3, [pc, #680]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fb72 	bl	80012a4 <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fb6d 	bl	80012a4 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1c8      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bd8:	4ba1      	ldr	r3, [pc, #644]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	d0f1      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x3ee>
 8001be2:	e018      	b.n	8001c16 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be4:	4b9e      	ldr	r3, [pc, #632]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001be6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001be8:	4b9d      	ldr	r3, [pc, #628]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001bea:	2101      	movs	r1, #1
 8001bec:	438a      	bics	r2, r1
 8001bee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fb58 	bl	80012a4 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fb53 	bl	80012a4 <HAL_GetTick>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1ae      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c0c:	4b94      	ldr	r3, [pc, #592]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d1f1      	bne.n	8001bfa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <HAL_RCC_OscConfig+0x44a>
 8001c20:	e0ae      	b.n	8001d80 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	2023      	movs	r0, #35	; 0x23
 8001c24:	183b      	adds	r3, r7, r0
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b8d      	ldr	r3, [pc, #564]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	055b      	lsls	r3, r3, #21
 8001c32:	4013      	ands	r3, r2
 8001c34:	d109      	bne.n	8001c4a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b8a      	ldr	r3, [pc, #552]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c3a:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	0549      	lsls	r1, r1, #21
 8001c40:	430a      	orrs	r2, r1
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c44:	183b      	adds	r3, r7, r0
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <HAL_RCC_OscConfig+0x694>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d11a      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <HAL_RCC_OscConfig+0x694>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b84      	ldr	r3, [pc, #528]	; (8001e6c <HAL_RCC_OscConfig+0x694>)
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	0049      	lsls	r1, r1, #1
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c64:	f7ff fb1e 	bl	80012a4 <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6e:	f7ff fb19 	bl	80012a4 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b64      	cmp	r3, #100	; 0x64
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e174      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <HAL_RCC_OscConfig+0x694>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d107      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
 8001c98:	4b71      	ldr	r3, [pc, #452]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c9c:	4b70      	ldr	r3, [pc, #448]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001c9e:	2180      	movs	r1, #128	; 0x80
 8001ca0:	0049      	lsls	r1, r1, #1
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ca6:	e031      	b.n	8001d0c <HAL_RCC_OscConfig+0x534>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10c      	bne.n	8001cca <HAL_RCC_OscConfig+0x4f2>
 8001cb0:	4b6b      	ldr	r3, [pc, #428]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001cb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001cb6:	496c      	ldr	r1, [pc, #432]	; (8001e68 <HAL_RCC_OscConfig+0x690>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	651a      	str	r2, [r3, #80]	; 0x50
 8001cbc:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001cbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cc0:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001cc2:	496b      	ldr	r1, [pc, #428]	; (8001e70 <HAL_RCC_OscConfig+0x698>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	651a      	str	r2, [r3, #80]	; 0x50
 8001cc8:	e020      	b.n	8001d0c <HAL_RCC_OscConfig+0x534>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	23a0      	movs	r3, #160	; 0xa0
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x51c>
 8001cd6:	4b62      	ldr	r3, [pc, #392]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cda:	4b61      	ldr	r3, [pc, #388]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	00c9      	lsls	r1, r1, #3
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ce4:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001ce6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ce8:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	0049      	lsls	r1, r1, #1
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	651a      	str	r2, [r3, #80]	; 0x50
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0x534>
 8001cf4:	4b5a      	ldr	r3, [pc, #360]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001cf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cf8:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001cfa:	495b      	ldr	r1, [pc, #364]	; (8001e68 <HAL_RCC_OscConfig+0x690>)
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	651a      	str	r2, [r3, #80]	; 0x50
 8001d00:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d04:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001d06:	495a      	ldr	r1, [pc, #360]	; (8001e70 <HAL_RCC_OscConfig+0x698>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d015      	beq.n	8001d40 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7ff fac6 	bl	80012a4 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d1c:	e009      	b.n	8001d32 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fac1 	bl	80012a4 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_RCC_OscConfig+0x69c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e11b      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d32:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d0ef      	beq.n	8001d1e <HAL_RCC_OscConfig+0x546>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7ff fab0 	bl	80012a4 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d48:	e009      	b.n	8001d5e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff faab 	bl	80012a4 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	4a47      	ldr	r2, [pc, #284]	; (8001e74 <HAL_RCC_OscConfig+0x69c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e105      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d5e:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4013      	ands	r3, r2
 8001d68:	d1ef      	bne.n	8001d4a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d6a:	2323      	movs	r3, #35	; 0x23
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d74:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d78:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001d7a:	493f      	ldr	r1, [pc, #252]	; (8001e78 <HAL_RCC_OscConfig+0x6a0>)
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2220      	movs	r2, #32
 8001d86:	4013      	ands	r3, r2
 8001d88:	d049      	beq.n	8001e1e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d026      	beq.n	8001de0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d92:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001d98:	2101      	movs	r1, #1
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da2:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	430a      	orrs	r2, r1
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <HAL_RCC_OscConfig+0x6a4>)
 8001dac:	6a1a      	ldr	r2, [r3, #32]
 8001dae:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <HAL_RCC_OscConfig+0x6a4>)
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	0189      	lsls	r1, r1, #6
 8001db4:	430a      	orrs	r2, r1
 8001db6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fa74 	bl	80012a4 <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dc2:	f7ff fa6f 	bl	80012a4 <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0ca      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d0f1      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x5ea>
 8001dde:	e01e      	b.n	8001e1e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	438a      	bics	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_RCC_OscConfig+0x6a4>)
 8001dee:	6a1a      	ldr	r2, [r3, #32]
 8001df0:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <HAL_RCC_OscConfig+0x6a4>)
 8001df2:	4923      	ldr	r1, [pc, #140]	; (8001e80 <HAL_RCC_OscConfig+0x6a8>)
 8001df4:	400a      	ands	r2, r1
 8001df6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fa54 	bl	80012a4 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e02:	f7ff fa4f 	bl	80012a4 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0aa      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d1f1      	bne.n	8001e02 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d100      	bne.n	8001e28 <HAL_RCC_OscConfig+0x650>
 8001e26:	e09f      	b.n	8001f68 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	d100      	bne.n	8001e30 <HAL_RCC_OscConfig+0x658>
 8001e2e:	e078      	b.n	8001f22 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d159      	bne.n	8001eec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_RCC_OscConfig+0x688>)
 8001e3e:	4911      	ldr	r1, [pc, #68]	; (8001e84 <HAL_RCC_OscConfig+0x6ac>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fa2e 	bl	80012a4 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e4c:	e01c      	b.n	8001e88 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7ff fa29 	bl	80012a4 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d915      	bls.n	8001e88 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e084      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
 8001e60:	40021000 	.word	0x40021000
 8001e64:	ffff1fff 	.word	0xffff1fff
 8001e68:	fffffeff 	.word	0xfffffeff
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	fffffbff 	.word	0xfffffbff
 8001e74:	00001388 	.word	0x00001388
 8001e78:	efffffff 	.word	0xefffffff
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	ffffdfff 	.word	0xffffdfff
 8001e84:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e88:	4b3a      	ldr	r3, [pc, #232]	; (8001f74 <HAL_RCC_OscConfig+0x79c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	049b      	lsls	r3, r3, #18
 8001e90:	4013      	ands	r3, r2
 8001e92:	d1dc      	bne.n	8001e4e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e94:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <HAL_RCC_OscConfig+0x79c>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a37      	ldr	r2, [pc, #220]	; (8001f78 <HAL_RCC_OscConfig+0x7a0>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	431a      	orrs	r2, r3
 8001eae:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <HAL_RCC_OscConfig+0x79c>)
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_RCC_OscConfig+0x79c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <HAL_RCC_OscConfig+0x79c>)
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	0449      	lsls	r1, r1, #17
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f9ef 	bl	80012a4 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f9ea 	bl	80012a4 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e045      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ede:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_RCC_OscConfig+0x79c>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	049b      	lsls	r3, r3, #18
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x6f4>
 8001eea:	e03d      	b.n	8001f68 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_RCC_OscConfig+0x79c>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_RCC_OscConfig+0x79c>)
 8001ef2:	4922      	ldr	r1, [pc, #136]	; (8001f7c <HAL_RCC_OscConfig+0x7a4>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f9d4 	bl	80012a4 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff f9cf 	bl	80012a4 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e02a      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_RCC_OscConfig+0x79c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	049b      	lsls	r3, r3, #18
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x72a>
 8001f20:	e022      	b.n	8001f68 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e01d      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_OscConfig+0x79c>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	025b      	lsls	r3, r3, #9
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d10f      	bne.n	8001f64 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	23f0      	movs	r3, #240	; 0xf0
 8001f48:	039b      	lsls	r3, r3, #14
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d107      	bne.n	8001f64 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	23c0      	movs	r3, #192	; 0xc0
 8001f58:	041b      	lsls	r3, r3, #16
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b00a      	add	sp, #40	; 0x28
 8001f70:	bdb0      	pop	{r4, r5, r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	40021000 	.word	0x40021000
 8001f78:	ff02ffff 	.word	0xff02ffff
 8001f7c:	feffffff 	.word	0xfeffffff

08001f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e128      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b96      	ldr	r3, [pc, #600]	; (80021f0 <HAL_RCC_ClockConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d91e      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b93      	ldr	r3, [pc, #588]	; (80021f0 <HAL_RCC_ClockConfig+0x270>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4393      	bics	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	4b90      	ldr	r3, [pc, #576]	; (80021f0 <HAL_RCC_ClockConfig+0x270>)
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fb4:	f7ff f976 	bl	80012a4 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbc:	e009      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbe:	f7ff f971 	bl	80012a4 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	4a8a      	ldr	r2, [pc, #552]	; (80021f4 <HAL_RCC_ClockConfig+0x274>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e109      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b87      	ldr	r3, [pc, #540]	; (80021f0 <HAL_RCC_ClockConfig+0x270>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4013      	ands	r3, r2
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1ee      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fea:	4b83      	ldr	r3, [pc, #524]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	22f0      	movs	r2, #240	; 0xf0
 8001ff0:	4393      	bics	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	4b7f      	ldr	r3, [pc, #508]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2201      	movs	r2, #1
 8002004:	4013      	ands	r3, r2
 8002006:	d100      	bne.n	800200a <HAL_RCC_ClockConfig+0x8a>
 8002008:	e089      	b.n	800211e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002012:	4b79      	ldr	r3, [pc, #484]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	029b      	lsls	r3, r3, #10
 800201a:	4013      	ands	r3, r2
 800201c:	d120      	bne.n	8002060 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0e1      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	049b      	lsls	r3, r3, #18
 8002032:	4013      	ands	r3, r2
 8002034:	d114      	bne.n	8002060 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0d5      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d106      	bne.n	8002050 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002042:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2204      	movs	r2, #4
 8002048:	4013      	ands	r3, r2
 800204a:	d109      	bne.n	8002060 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0ca      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002050:	4b69      	ldr	r3, [pc, #420]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0c2      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002060:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2203      	movs	r2, #3
 8002066:	4393      	bics	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002074:	f7ff f916 	bl	80012a4 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d111      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002084:	e009      	b.n	800209a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002086:	f7ff f90d 	bl	80012a4 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_RCC_ClockConfig+0x274>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0a5      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800209a:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	220c      	movs	r2, #12
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d1ef      	bne.n	8002086 <HAL_RCC_ClockConfig+0x106>
 80020a6:	e03a      	b.n	800211e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d111      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b0:	e009      	b.n	80020c6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b2:	f7ff f8f7 	bl	80012a4 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	4a4d      	ldr	r2, [pc, #308]	; (80021f4 <HAL_RCC_ClockConfig+0x274>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e08f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c6:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	220c      	movs	r2, #12
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d1ef      	bne.n	80020b2 <HAL_RCC_ClockConfig+0x132>
 80020d2:	e024      	b.n	800211e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d11b      	bne.n	8002114 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020dc:	e009      	b.n	80020f2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7ff f8e1 	bl	80012a4 <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	4a42      	ldr	r2, [pc, #264]	; (80021f4 <HAL_RCC_ClockConfig+0x274>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e079      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f2:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	220c      	movs	r2, #12
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d1ef      	bne.n	80020de <HAL_RCC_ClockConfig+0x15e>
 80020fe:	e00e      	b.n	800211e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7ff f8d0 	bl	80012a4 <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	4a3a      	ldr	r2, [pc, #232]	; (80021f4 <HAL_RCC_ClockConfig+0x274>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e068      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002114:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	220c      	movs	r2, #12
 800211a:	4013      	ands	r3, r2
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCC_ClockConfig+0x270>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21e      	bcs.n	800216a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_RCC_ClockConfig+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2201      	movs	r2, #1
 8002132:	4393      	bics	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	4b2e      	ldr	r3, [pc, #184]	; (80021f0 <HAL_RCC_ClockConfig+0x270>)
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213e:	f7ff f8b1 	bl	80012a4 <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	e009      	b.n	800215c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	f7ff f8ac 	bl	80012a4 <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	4a28      	ldr	r2, [pc, #160]	; (80021f4 <HAL_RCC_ClockConfig+0x274>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e044      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215c:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RCC_ClockConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2201      	movs	r2, #1
 8002162:	4013      	ands	r3, r2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d1ee      	bne.n	8002148 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2204      	movs	r2, #4
 8002170:	4013      	ands	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a20      	ldr	r2, [pc, #128]	; (80021fc <HAL_RCC_ClockConfig+0x27c>)
 800217a:	4013      	ands	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 8002184:	430a      	orrs	r2, r1
 8002186:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2208      	movs	r2, #8
 800218e:	4013      	ands	r3, r2
 8002190:	d00a      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	4a1a      	ldr	r2, [pc, #104]	; (8002200 <HAL_RCC_ClockConfig+0x280>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	00da      	lsls	r2, r3, #3
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021a8:	f000 f832 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021ac:	0001      	movs	r1, r0
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_ClockConfig+0x278>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	220f      	movs	r2, #15
 80021b6:	4013      	ands	r3, r2
 80021b8:	4a12      	ldr	r2, [pc, #72]	; (8002204 <HAL_RCC_ClockConfig+0x284>)
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	000a      	movs	r2, r1
 80021be:	40da      	lsrs	r2, r3
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_RCC_ClockConfig+0x288>)
 80021c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_RCC_ClockConfig+0x28c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	250b      	movs	r5, #11
 80021ca:	197c      	adds	r4, r7, r5
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7ff f823 	bl	8001218 <HAL_InitTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80021d6:	197b      	adds	r3, r7, r5
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80021de:	197b      	adds	r3, r7, r5
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	0018      	movs	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b004      	add	sp, #16
 80021ec:	bdb0      	pop	{r4, r5, r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	40022000 	.word	0x40022000
 80021f4:	00001388 	.word	0x00001388
 80021f8:	40021000 	.word	0x40021000
 80021fc:	fffff8ff 	.word	0xfffff8ff
 8002200:	ffffc7ff 	.word	0xffffc7ff
 8002204:	08002698 	.word	0x08002698
 8002208:	20000000 	.word	0x20000000
 800220c:	20000004 	.word	0x20000004

08002210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b08e      	sub	sp, #56	; 0x38
 8002214:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002216:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <HAL_RCC_GetSysClockFreq+0x138>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221e:	230c      	movs	r3, #12
 8002220:	4013      	ands	r3, r2
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d014      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x40>
 8002226:	d900      	bls.n	800222a <HAL_RCC_GetSysClockFreq+0x1a>
 8002228:	e07b      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x112>
 800222a:	2b04      	cmp	r3, #4
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x24>
 800222e:	2b08      	cmp	r3, #8
 8002230:	d00b      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x3a>
 8002232:	e076      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002234:	4b44      	ldr	r3, [pc, #272]	; (8002348 <HAL_RCC_GetSysClockFreq+0x138>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2210      	movs	r2, #16
 800223a:	4013      	ands	r3, r2
 800223c:	d002      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800223e:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002242:	e07c      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002244:	4b42      	ldr	r3, [pc, #264]	; (8002350 <HAL_RCC_GetSysClockFreq+0x140>)
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002248:	e079      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <HAL_RCC_GetSysClockFreq+0x144>)
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800224e:	e076      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	0c9a      	lsrs	r2, r3, #18
 8002254:	230f      	movs	r3, #15
 8002256:	401a      	ands	r2, r3
 8002258:	4b3f      	ldr	r3, [pc, #252]	; (8002358 <HAL_RCC_GetSysClockFreq+0x148>)
 800225a:	5c9b      	ldrb	r3, [r3, r2]
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002260:	0d9a      	lsrs	r2, r3, #22
 8002262:	2303      	movs	r3, #3
 8002264:	4013      	ands	r3, r2
 8002266:	3301      	adds	r3, #1
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226a:	4b37      	ldr	r3, [pc, #220]	; (8002348 <HAL_RCC_GetSysClockFreq+0x138>)
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	025b      	lsls	r3, r3, #9
 8002272:	4013      	ands	r3, r2
 8002274:	d01a      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	4a35      	ldr	r2, [pc, #212]	; (8002354 <HAL_RCC_GetSysClockFreq+0x144>)
 8002280:	2300      	movs	r3, #0
 8002282:	69b8      	ldr	r0, [r7, #24]
 8002284:	69f9      	ldr	r1, [r7, #28]
 8002286:	f7fd ffeb 	bl	8000260 <__aeabi_lmul>
 800228a:	0002      	movs	r2, r0
 800228c:	000b      	movs	r3, r1
 800228e:	0010      	movs	r0, r2
 8002290:	0019      	movs	r1, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f7fd ffbf 	bl	8000220 <__aeabi_uldivmod>
 80022a2:	0002      	movs	r2, r0
 80022a4:	000b      	movs	r3, r1
 80022a6:	0013      	movs	r3, r2
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
 80022aa:	e037      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <HAL_RCC_GetSysClockFreq+0x138>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2210      	movs	r2, #16
 80022b2:	4013      	ands	r3, r2
 80022b4:	d01a      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4a23      	ldr	r2, [pc, #140]	; (800234c <HAL_RCC_GetSysClockFreq+0x13c>)
 80022c0:	2300      	movs	r3, #0
 80022c2:	68b8      	ldr	r0, [r7, #8]
 80022c4:	68f9      	ldr	r1, [r7, #12]
 80022c6:	f7fd ffcb 	bl	8000260 <__aeabi_lmul>
 80022ca:	0002      	movs	r2, r0
 80022cc:	000b      	movs	r3, r1
 80022ce:	0010      	movs	r0, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f7fd ff9f 	bl	8000220 <__aeabi_uldivmod>
 80022e2:	0002      	movs	r2, r0
 80022e4:	000b      	movs	r3, r1
 80022e6:	0013      	movs	r3, r2
 80022e8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ea:	e017      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	0018      	movs	r0, r3
 80022f0:	2300      	movs	r3, #0
 80022f2:	0019      	movs	r1, r3
 80022f4:	4a16      	ldr	r2, [pc, #88]	; (8002350 <HAL_RCC_GetSysClockFreq+0x140>)
 80022f6:	2300      	movs	r3, #0
 80022f8:	f7fd ffb2 	bl	8000260 <__aeabi_lmul>
 80022fc:	0002      	movs	r2, r0
 80022fe:	000b      	movs	r3, r1
 8002300:	0010      	movs	r0, r2
 8002302:	0019      	movs	r1, r3
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	001c      	movs	r4, r3
 8002308:	2300      	movs	r3, #0
 800230a:	001d      	movs	r5, r3
 800230c:	0022      	movs	r2, r4
 800230e:	002b      	movs	r3, r5
 8002310:	f7fd ff86 	bl	8000220 <__aeabi_uldivmod>
 8002314:	0002      	movs	r2, r0
 8002316:	000b      	movs	r3, r1
 8002318:	0013      	movs	r3, r2
 800231a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800231c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002320:	e00d      	b.n	800233e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_GetSysClockFreq+0x138>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	0b5b      	lsrs	r3, r3, #13
 8002328:	2207      	movs	r2, #7
 800232a:	4013      	ands	r3, r2
 800232c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	3301      	adds	r3, #1
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	0212      	lsls	r2, r2, #8
 8002336:	409a      	lsls	r2, r3
 8002338:	0013      	movs	r3, r2
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800233c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b00e      	add	sp, #56	; 0x38
 8002346:	bdb0      	pop	{r4, r5, r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	003d0900 	.word	0x003d0900
 8002350:	00f42400 	.word	0x00f42400
 8002354:	007a1200 	.word	0x007a1200
 8002358:	080026a8 	.word	0x080026a8

0800235c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e032      	b.n	80023d4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2239      	movs	r2, #57	; 0x39
 8002372:	5c9b      	ldrb	r3, [r3, r2]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d107      	bne.n	800238a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2238      	movs	r2, #56	; 0x38
 800237e:	2100      	movs	r1, #0
 8002380:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f7fe fdbd 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2239      	movs	r2, #57	; 0x39
 800238e:	2102      	movs	r1, #2
 8002390:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	0019      	movs	r1, r3
 800239c:	0010      	movs	r0, r2
 800239e:	f000 f867 	bl	8002470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	223e      	movs	r2, #62	; 0x3e
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	223a      	movs	r2, #58	; 0x3a
 80023ae:	2101      	movs	r1, #1
 80023b0:	5499      	strb	r1, [r3, r2]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	223b      	movs	r2, #59	; 0x3b
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223c      	movs	r2, #60	; 0x3c
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	223d      	movs	r2, #61	; 0x3d
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2239      	movs	r2, #57	; 0x39
 80023ce:	2101      	movs	r1, #1
 80023d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2239      	movs	r2, #57	; 0x39
 80023e8:	5c9b      	ldrb	r3, [r3, r2]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d001      	beq.n	80023f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e033      	b.n	800245c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2239      	movs	r2, #57	; 0x39
 80023f8:	2102      	movs	r1, #2
 80023fa:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	05db      	lsls	r3, r3, #23
 8002404:	429a      	cmp	r2, r3
 8002406:	d00e      	beq.n	8002426 <HAL_TIM_Base_Start+0x4a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a15      	ldr	r2, [pc, #84]	; (8002464 <HAL_TIM_Base_Start+0x88>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_TIM_Base_Start+0x4a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a14      	ldr	r2, [pc, #80]	; (8002468 <HAL_TIM_Base_Start+0x8c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_TIM_Base_Start+0x4a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a12      	ldr	r2, [pc, #72]	; (800246c <HAL_TIM_Base_Start+0x90>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d111      	bne.n	800244a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2207      	movs	r2, #7
 800242e:	4013      	ands	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b06      	cmp	r3, #6
 8002436:	d010      	beq.n	800245a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2101      	movs	r1, #1
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002448:	e007      	b.n	800245a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2101      	movs	r1, #1
 8002456:	430a      	orrs	r2, r1
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b004      	add	sp, #16
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40000400 	.word	0x40000400
 8002468:	40010800 	.word	0x40010800
 800246c:	40011400 	.word	0x40011400

08002470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	05db      	lsls	r3, r3, #23
 8002486:	429a      	cmp	r2, r3
 8002488:	d00b      	beq.n	80024a2 <TIM_Base_SetConfig+0x32>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a23      	ldr	r2, [pc, #140]	; (800251c <TIM_Base_SetConfig+0xac>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <TIM_Base_SetConfig+0x32>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a22      	ldr	r2, [pc, #136]	; (8002520 <TIM_Base_SetConfig+0xb0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d003      	beq.n	80024a2 <TIM_Base_SetConfig+0x32>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a21      	ldr	r2, [pc, #132]	; (8002524 <TIM_Base_SetConfig+0xb4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d108      	bne.n	80024b4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2270      	movs	r2, #112	; 0x70
 80024a6:	4393      	bics	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	05db      	lsls	r3, r3, #23
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d00b      	beq.n	80024d6 <TIM_Base_SetConfig+0x66>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a16      	ldr	r2, [pc, #88]	; (800251c <TIM_Base_SetConfig+0xac>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <TIM_Base_SetConfig+0x66>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a15      	ldr	r2, [pc, #84]	; (8002520 <TIM_Base_SetConfig+0xb0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d003      	beq.n	80024d6 <TIM_Base_SetConfig+0x66>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a14      	ldr	r2, [pc, #80]	; (8002524 <TIM_Base_SetConfig+0xb4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d108      	bne.n	80024e8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4a13      	ldr	r2, [pc, #76]	; (8002528 <TIM_Base_SetConfig+0xb8>)
 80024da:	4013      	ands	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	4393      	bics	r3, r2
 80024ee:	001a      	movs	r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	615a      	str	r2, [r3, #20]
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b004      	add	sp, #16
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40000400 	.word	0x40000400
 8002520:	40010800 	.word	0x40010800
 8002524:	40011400 	.word	0x40011400
 8002528:	fffffcff 	.word	0xfffffcff

0800252c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2238      	movs	r2, #56	; 0x38
 800253a:	5c9b      	ldrb	r3, [r3, r2]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002540:	2302      	movs	r3, #2
 8002542:	e047      	b.n	80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2238      	movs	r2, #56	; 0x38
 8002548:	2101      	movs	r1, #1
 800254a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2239      	movs	r2, #57	; 0x39
 8002550:	2102      	movs	r1, #2
 8002552:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2270      	movs	r2, #112	; 0x70
 8002568:	4393      	bics	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	05db      	lsls	r3, r3, #23
 8002586:	429a      	cmp	r2, r3
 8002588:	d00e      	beq.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a13      	ldr	r2, [pc, #76]	; (80025dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10c      	bne.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	4393      	bics	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2239      	movs	r2, #57	; 0x39
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2238      	movs	r2, #56	; 0x38
 80025ce:	2100      	movs	r1, #0
 80025d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b004      	add	sp, #16
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40000400 	.word	0x40000400
 80025e0:	40010800 	.word	0x40010800
 80025e4:	40011400 	.word	0x40011400

080025e8 <__libc_init_array>:
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	2600      	movs	r6, #0
 80025ec:	4d0c      	ldr	r5, [pc, #48]	; (8002620 <__libc_init_array+0x38>)
 80025ee:	4c0d      	ldr	r4, [pc, #52]	; (8002624 <__libc_init_array+0x3c>)
 80025f0:	1b64      	subs	r4, r4, r5
 80025f2:	10a4      	asrs	r4, r4, #2
 80025f4:	42a6      	cmp	r6, r4
 80025f6:	d109      	bne.n	800260c <__libc_init_array+0x24>
 80025f8:	2600      	movs	r6, #0
 80025fa:	f000 f821 	bl	8002640 <_init>
 80025fe:	4d0a      	ldr	r5, [pc, #40]	; (8002628 <__libc_init_array+0x40>)
 8002600:	4c0a      	ldr	r4, [pc, #40]	; (800262c <__libc_init_array+0x44>)
 8002602:	1b64      	subs	r4, r4, r5
 8002604:	10a4      	asrs	r4, r4, #2
 8002606:	42a6      	cmp	r6, r4
 8002608:	d105      	bne.n	8002616 <__libc_init_array+0x2e>
 800260a:	bd70      	pop	{r4, r5, r6, pc}
 800260c:	00b3      	lsls	r3, r6, #2
 800260e:	58eb      	ldr	r3, [r5, r3]
 8002610:	4798      	blx	r3
 8002612:	3601      	adds	r6, #1
 8002614:	e7ee      	b.n	80025f4 <__libc_init_array+0xc>
 8002616:	00b3      	lsls	r3, r6, #2
 8002618:	58eb      	ldr	r3, [r5, r3]
 800261a:	4798      	blx	r3
 800261c:	3601      	adds	r6, #1
 800261e:	e7f2      	b.n	8002606 <__libc_init_array+0x1e>
 8002620:	080026bc 	.word	0x080026bc
 8002624:	080026bc 	.word	0x080026bc
 8002628:	080026bc 	.word	0x080026bc
 800262c:	080026c0 	.word	0x080026c0

08002630 <memset>:
 8002630:	0003      	movs	r3, r0
 8002632:	1882      	adds	r2, r0, r2
 8002634:	4293      	cmp	r3, r2
 8002636:	d100      	bne.n	800263a <memset+0xa>
 8002638:	4770      	bx	lr
 800263a:	7019      	strb	r1, [r3, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	e7f9      	b.n	8002634 <memset+0x4>

08002640 <_init>:
 8002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002646:	bc08      	pop	{r3}
 8002648:	469e      	mov	lr, r3
 800264a:	4770      	bx	lr

0800264c <_fini>:
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002652:	bc08      	pop	{r3}
 8002654:	469e      	mov	lr, r3
 8002656:	4770      	bx	lr
